// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MONSTERTEST_MYGAME_EXAMPLE_H_
#define FLATBUFFERS_GENERATED_MONSTERTEST_MYGAME_EXAMPLE_H_

#include "flatbuffers/flatbuffers.h"
#include "flatbuffers/flexbuffers.h"

#include "include_test1_generated.rs"
#include "include_test2_generated.rs"

namespace MyGame {

struct InParentNamespace;

namespace Example2 {

struct Monster;

}  // namespace Example2

namespace Example {

struct Test;

struct TestSimpleTableWithEnum;

struct Vec3;

struct Ability;

struct Stat;

struct Monster;

struct TypeAliases;

enum Color {
  Color_Red = 1,
  Color_Green = 2,
  Color_Blue = 8,
  Color_NONE = 0,
  Color_ANY = 11
};

inline Color (&EnumValuesColor())[3] {
  static Color values[] = {
    Color_Red,
    Color_Green,
    Color_Blue
  };
  return values;
}

inline const char **EnumNamesColor() {
  static const char *names[] = {
    "Red",
    "Green",
    "",
    "",
    "",
    "",
    "",
    "Blue",
    nullptr
  };
  return names;
}

inline const char *EnumNameColor(Color e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(Color_Red);
  return EnumNamesColor()[index];
}

enum Any {
  Any_NONE = 0,
  Any_Monster = 1,
  Any_TestSimpleTableWithEnum = 2,
  Any_MyGame_Example2_Monster = 3,
  Any_MIN = Any_NONE,
  Any_MAX = Any_MyGame_Example2_Monster
};

inline Any (&EnumValuesAny())[4] {
  static Any values[] = {
    Any_NONE,
    Any_Monster,
    Any_TestSimpleTableWithEnum,
    Any_MyGame_Example2_Monster
  };
  return values;
}

inline const char **EnumNamesAny() {
  static const char *names[] = {
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster",
    nullptr
  };
  return names;
}

inline const char *EnumNameAny(Any e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesAny()[index];
}

template<typename T> struct AnyTraits {
  static const Any enum_value = Any_NONE;
};

template<> struct AnyTraits<Monster> {
  static const Any enum_value = Any_Monster;
};

template<> struct AnyTraits<TestSimpleTableWithEnum> {
  static const Any enum_value = Any_TestSimpleTableWithEnum;
};

template<> struct AnyTraits<MyGame::Example2::Monster> {
  static const Any enum_value = Any_MyGame_Example2_Monster;
};

bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type);
bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

MANUALLY_ALIGNED_STRUCT(2) Test FLATBUFFERS_FINAL_CLASS {
 private:
  i16 a_;
  i8 b_;
  int8_t padding0__;

 public:
  Test() {
    memset(this, 0, sizeof(Test));
  }
  Test(i16 _a, i8 _b)
      : a_(flatbuffers::EndianScalar(_a)),
        b_(flatbuffers::EndianScalar(_b)),
        padding0__(0) {
    (void)padding0__;
  }
  i16 a() const {
    return flatbuffers::EndianScalar(a_);
  }
  i8 b() const {
    return flatbuffers::EndianScalar(b_);
  }
};
STRUCT_END(Test, 4);

MANUALLY_ALIGNED_STRUCT(16) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  f32 x_;
  f32 y_;
  f32 z_;
  int32_t padding0__;
  f64 test1_;
  i8 test2_;
  int8_t padding1__;
  Test test3_;
  int16_t padding2__;

 public:
  Vec3() {
    memset(this, 0, sizeof(Vec3));
  }
  Vec3(f32 _x, f32 _y, f32 _z, f64 _test1, Color _test2, const Test &_test3)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)),
        padding0__(0),
        test1_(flatbuffers::EndianScalar(_test1)),
        test2_(flatbuffers::EndianScalar(static_cast<i8>(_test2))),
        padding1__(0),
        test3_(_test3),
        padding2__(0) {
    (void)padding0__;
    (void)padding1__;
    (void)padding2__;
  }
  f32 x() const {
    return flatbuffers::EndianScalar(x_);
  }
  f32 y() const {
    return flatbuffers::EndianScalar(y_);
  }
  f32 z() const {
    return flatbuffers::EndianScalar(z_);
  }
  f64 test1() const {
    return flatbuffers::EndianScalar(test1_);
  }
  Color test2() const {
    return static_cast<Color>(flatbuffers::EndianScalar(test2_));
  }
  const Test &test3() const {
    return test3_;
  }
};
STRUCT_END(Vec3, 32);

MANUALLY_ALIGNED_STRUCT(4) Ability FLATBUFFERS_FINAL_CLASS {
 private:
  u32 id_;
  u32 distance_;

 public:
  Ability() {
    memset(this, 0, sizeof(Ability));
  }
  Ability(u32 _id, u32 _distance)
      : id_(flatbuffers::EndianScalar(_id)),
        distance_(flatbuffers::EndianScalar(_distance)) {
  }
  u32 id() const {
    return flatbuffers::EndianScalar(id_);
  }
  bool KeyCompareLessThan(const Ability *o) const {
    return id() < o->id();
  }
  int KeyCompareWithValue(u32 val) const {
    const auto key = id();
    return static_cast<int>(key > val) - static_cast<int>(key < val);
  }
  u32 distance() const {
    return flatbuffers::EndianScalar(distance_);
  }
};
STRUCT_END(Ability, 8);

}  // namespace Example

struct InParentNamespace FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct InParentNamespaceBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit InParentNamespaceBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InParentNamespaceBuilder &operator=(const InParentNamespaceBuilder &);
  flatbuffers::Offset<InParentNamespace> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InParentNamespace>(end);
    return o;
  }
};

inline flatbuffers::Offset<InParentNamespace> CreateInParentNamespace(
    flatbuffers::FlatBufferBuilder &_fbb) {
  InParentNamespaceBuilder builder_(_fbb);
  return builder_.Finish();
}

namespace Example2 {

struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct MonsterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterBuilder &operator=(const MonsterBuilder &);
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb) {
  MonsterBuilder builder_(_fbb);
  return builder_.Finish();
}

}  // namespace Example2

namespace Example {

struct TestSimpleTableWithEnum FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_COLOR = 4
  };
  Color color() const {
    return static_cast<Color>(GetField<i8>(VT_COLOR, 2));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<i8>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
};

struct TestSimpleTableWithEnumBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_color(Color color) {
    fbb_.AddElement<i8>(TestSimpleTableWithEnum::VT_COLOR, static_cast<i8>(color), 2);
  }
  explicit TestSimpleTableWithEnumBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestSimpleTableWithEnumBuilder &operator=(const TestSimpleTableWithEnumBuilder &);
  flatbuffers::Offset<TestSimpleTableWithEnum> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestSimpleTableWithEnum>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestSimpleTableWithEnum> CreateTestSimpleTableWithEnum(
    flatbuffers::FlatBufferBuilder &_fbb,
    Color color = Color_Green) {
  TestSimpleTableWithEnumBuilder builder_(_fbb);
  builder_.add_color(color);
  return builder_.Finish();
}

struct Stat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_VAL = 6,
    VT_COUNT = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  i64 val() const {
    return GetField<i64>(VT_VAL, 0);
  }
  u16 count() const {
    return GetField<u16>(VT_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField<i64>(verifier, VT_VAL) &&
           VerifyField<u16>(verifier, VT_COUNT) &&
           verifier.EndTable();
  }
};

struct StatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Stat::VT_ID, id);
  }
  void add_val(i64 val) {
    fbb_.AddElement<i64>(Stat::VT_VAL, val, 0);
  }
  void add_count(u16 count) {
    fbb_.AddElement<u16>(Stat::VT_COUNT, count, 0);
  }
  explicit StatBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  StatBuilder &operator=(const StatBuilder &);
  flatbuffers::Offset<Stat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Stat>(end);
    return o;
  }
};

inline flatbuffers::Offset<Stat> CreateStat(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    i64 val = 0,
    u16 count = 0) {
  StatBuilder builder_(_fbb);
  builder_.add_val(val);
  builder_.add_id(id);
  builder_.add_count(count);
  return builder_.Finish();
}

inline flatbuffers::Offset<Stat> CreateStatDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    i64 val = 0,
    u16 count = 0) {
  return MyGame::Example::CreateStat(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      val,
      count);
}

/// an example documentation comment: monster object
struct Monster FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_POS = 4,
    VT_MANA = 6,
    VT_HP = 8,
    VT_NAME = 10,
    VT_INVENTORY = 14,
    VT_COLOR = 16,
    VT_TEST_TYPE = 18,
    VT_TEST = 20,
    VT_TEST4 = 22,
    VT_TESTARRAYOFSTRING = 24,
    VT_TESTARRAYOFTABLES = 26,
    VT_ENEMY = 28,
    VT_TESTNESTEDFLATBUFFER = 30,
    VT_TESTEMPTY = 32,
    VT_TESTBOOL = 34,
    VT_TESTHASHS32_FNV1 = 36,
    VT_TESTHASHU32_FNV1 = 38,
    VT_TESTHASHS64_FNV1 = 40,
    VT_TESTHASHU64_FNV1 = 42,
    VT_TESTHASHS32_FNV1A = 44,
    VT_TESTHASHU32_FNV1A = 46,
    VT_TESTHASHS64_FNV1A = 48,
    VT_TESTHASHU64_FNV1A = 50,
    VT_TESTARRAYOFBOOLS = 52,
    VT_TESTF = 54,
    VT_TESTF2 = 56,
    VT_TESTF3 = 58,
    VT_TESTARRAYOFSTRING2 = 60,
    VT_TESTARRAYOFSORTEDSTRUCT = 62,
    VT_FLEX = 64,
    VT_TEST5 = 66,
    VT_VECTOR_OF_LONGS = 68,
    VT_VECTOR_OF_DOUBLES = 70,
    VT_PARENT_NAMESPACE_TEST = 72
  };
  const Vec3 *pos() const {
    return GetStruct<const Vec3 *>(VT_POS);
  }
  i16 mana() const {
    return GetField<i16>(VT_MANA, 150);
  }
  i16 hp() const {
    return GetField<i16>(VT_HP, 100);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Monster *o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *val) const {
    return strcmp(name()->c_str(), val);
  }
  const flatbuffers::Vector<u8> *inventory() const {
    return GetPointer<const flatbuffers::Vector<u8> *>(VT_INVENTORY);
  }
  Color color() const {
    return static_cast<Color>(GetField<i8>(VT_COLOR, 8));
  }
  Any test_type() const {
    return static_cast<Any>(GetField<u8>(VT_TEST_TYPE, 0));
  }
  const void *test() const {
    return GetPointer<const void *>(VT_TEST);
  }
  template<typename T> const T *test_as() const;
  const Monster *test_as_Monster() const {
    return test_type() == Any_Monster ? static_cast<const Monster *>(test()) : nullptr;
  }
  const TestSimpleTableWithEnum *test_as_TestSimpleTableWithEnum() const {
    return test_type() == Any_TestSimpleTableWithEnum ? static_cast<const TestSimpleTableWithEnum *>(test()) : nullptr;
  }
  const MyGame::Example2::Monster *test_as_MyGame_Example2_Monster() const {
    return test_type() == Any_MyGame_Example2_Monster ? static_cast<const MyGame::Example2::Monster *>(test()) : nullptr;
  }
  const flatbuffers::Vector<const Test *> *test4() const {
    return GetPointer<const flatbuffers::Vector<const Test *> *>(VT_TEST4);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *testarrayofstring() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TESTARRAYOFSTRING);
  }
  /// an example documentation comment: this will end up in the generated code
  /// multiline too
  const flatbuffers::Vector<flatbuffers::Offset<Monster>> *testarrayoftables() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Monster>> *>(VT_TESTARRAYOFTABLES);
  }
  const Monster *enemy() const {
    return GetPointer<const Monster *>(VT_ENEMY);
  }
  const flatbuffers::Vector<u8> *testnestedflatbuffer() const {
    return GetPointer<const flatbuffers::Vector<u8> *>(VT_TESTNESTEDFLATBUFFER);
  }
  const MyGame::Example::Monster *testnestedflatbuffer_nested_root() const {
    return flatbuffers::GetRoot<MyGame::Example::Monster>(testnestedflatbuffer()->Data());
  }
  const Stat *testempty() const {
    return GetPointer<const Stat *>(VT_TESTEMPTY);
  }
  bool testbool() const {
    return GetField<bool>(VT_TESTBOOL, 0) != 0;
  }
  i32 testhashs32_fnv1() const {
    return GetField<i32>(VT_TESTHASHS32_FNV1, 0);
  }
  u32 testhashu32_fnv1() const {
    return GetField<u32>(VT_TESTHASHU32_FNV1, 0);
  }
  i64 testhashs64_fnv1() const {
    return GetField<i64>(VT_TESTHASHS64_FNV1, 0);
  }
  u64 testhashu64_fnv1() const {
    return GetField<u64>(VT_TESTHASHU64_FNV1, 0);
  }
  i32 testhashs32_fnv1a() const {
    return GetField<i32>(VT_TESTHASHS32_FNV1A, 0);
  }
  u32 testhashu32_fnv1a() const {
    return GetField<u32>(VT_TESTHASHU32_FNV1A, 0);
  }
  i64 testhashs64_fnv1a() const {
    return GetField<i64>(VT_TESTHASHS64_FNV1A, 0);
  }
  u64 testhashu64_fnv1a() const {
    return GetField<u64>(VT_TESTHASHU64_FNV1A, 0);
  }
  const flatbuffers::Vector<bool> *testarrayofbools() const {
    return GetPointer<const flatbuffers::Vector<bool> *>(VT_TESTARRAYOFBOOLS);
  }
  f32 testf() const {
    return GetField<f32>(VT_TESTF, 3.14159f);
  }
  f32 testf2() const {
    return GetField<f32>(VT_TESTF2, 3.0f);
  }
  f32 testf3() const {
    return GetField<f32>(VT_TESTF3, 0.0f);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *testarrayofstring2() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TESTARRAYOFSTRING2);
  }
  const flatbuffers::Vector<const Ability *> *testarrayofsortedstruct() const {
    return GetPointer<const flatbuffers::Vector<const Ability *> *>(VT_TESTARRAYOFSORTEDSTRUCT);
  }
  const flatbuffers::Vector<u8> *flex() const {
    return GetPointer<const flatbuffers::Vector<u8> *>(VT_FLEX);
  }
  flexbuffers::Reference flex_flexbuffer_root() const {
    auto v = flex();
    return flexbuffers::GetRoot(v->Data(), v->size());
  }
  const flatbuffers::Vector<const Test *> *test5() const {
    return GetPointer<const flatbuffers::Vector<const Test *> *>(VT_TEST5);
  }
  const flatbuffers::Vector<i64> *vector_of_longs() const {
    return GetPointer<const flatbuffers::Vector<i64> *>(VT_VECTOR_OF_LONGS);
  }
  const flatbuffers::Vector<f64> *vector_of_doubles() const {
    return GetPointer<const flatbuffers::Vector<f64> *>(VT_VECTOR_OF_DOUBLES);
  }
  const MyGame::InParentNamespace *parent_namespace_test() const {
    return GetPointer<const MyGame::InParentNamespace *>(VT_PARENT_NAMESPACE_TEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vec3>(verifier, VT_POS) &&
           VerifyField<i16>(verifier, VT_MANA) &&
           VerifyField<i16>(verifier, VT_HP) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.Verify(inventory()) &&
           VerifyField<i8>(verifier, VT_COLOR) &&
           VerifyField<u8>(verifier, VT_TEST_TYPE) &&
           VerifyOffset(verifier, VT_TEST) &&
           VerifyAny(verifier, test(), test_type()) &&
           VerifyOffset(verifier, VT_TEST4) &&
           verifier.Verify(test4()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING) &&
           verifier.Verify(testarrayofstring()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFTABLES) &&
           verifier.Verify(testarrayoftables()) &&
           verifier.VerifyVectorOfTables(testarrayoftables()) &&
           VerifyOffset(verifier, VT_ENEMY) &&
           verifier.VerifyTable(enemy()) &&
           VerifyOffset(verifier, VT_TESTNESTEDFLATBUFFER) &&
           verifier.Verify(testnestedflatbuffer()) &&
           VerifyOffset(verifier, VT_TESTEMPTY) &&
           verifier.VerifyTable(testempty()) &&
           VerifyField<bool>(verifier, VT_TESTBOOL) &&
           VerifyField<i32>(verifier, VT_TESTHASHS32_FNV1) &&
           VerifyField<u32>(verifier, VT_TESTHASHU32_FNV1) &&
           VerifyField<i64>(verifier, VT_TESTHASHS64_FNV1) &&
           VerifyField<u64>(verifier, VT_TESTHASHU64_FNV1) &&
           VerifyField<i32>(verifier, VT_TESTHASHS32_FNV1A) &&
           VerifyField<u32>(verifier, VT_TESTHASHU32_FNV1A) &&
           VerifyField<i64>(verifier, VT_TESTHASHS64_FNV1A) &&
           VerifyField<u64>(verifier, VT_TESTHASHU64_FNV1A) &&
           VerifyOffset(verifier, VT_TESTARRAYOFBOOLS) &&
           verifier.Verify(testarrayofbools()) &&
           VerifyField<f32>(verifier, VT_TESTF) &&
           VerifyField<f32>(verifier, VT_TESTF2) &&
           VerifyField<f32>(verifier, VT_TESTF3) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING2) &&
           verifier.Verify(testarrayofstring2()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring2()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSORTEDSTRUCT) &&
           verifier.Verify(testarrayofsortedstruct()) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.Verify(flex()) &&
           VerifyOffset(verifier, VT_TEST5) &&
           verifier.Verify(test5()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_LONGS) &&
           verifier.Verify(vector_of_longs()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_DOUBLES) &&
           verifier.Verify(vector_of_doubles()) &&
           VerifyOffset(verifier, VT_PARENT_NAMESPACE_TEST) &&
           verifier.VerifyTable(parent_namespace_test()) &&
           verifier.EndTable();
  }
};

template<> inline const Monster *Monster::test_as<Monster>() const {
  return test_as_Monster();
}

template<> inline const TestSimpleTableWithEnum *Monster::test_as<TestSimpleTableWithEnum>() const {
  return test_as_TestSimpleTableWithEnum();
}

template<> inline const MyGame::Example2::Monster *Monster::test_as<MyGame::Example2::Monster>() const {
  return test_as_MyGame_Example2_Monster();
}

struct MonsterBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_pos(const Vec3 *pos) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  void add_mana(i16 mana) {
    fbb_.AddElement<i16>(Monster::VT_MANA, mana, 150);
  }
  void add_hp(i16 hp) {
    fbb_.AddElement<i16>(Monster::VT_HP, hp, 100);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  void add_inventory(flatbuffers::Offset<flatbuffers::Vector<u8>> inventory) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  void add_color(Color color) {
    fbb_.AddElement<i8>(Monster::VT_COLOR, static_cast<i8>(color), 8);
  }
  void add_test_type(Any test_type) {
    fbb_.AddElement<u8>(Monster::VT_TEST_TYPE, static_cast<u8>(test_type), 0);
  }
  void add_test(flatbuffers::Offset<void> test) {
    fbb_.AddOffset(Monster::VT_TEST, test);
  }
  void add_test4(flatbuffers::Offset<flatbuffers::Vector<const Test *>> test4) {
    fbb_.AddOffset(Monster::VT_TEST4, test4);
  }
  void add_testarrayofstring(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> testarrayofstring) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING, testarrayofstring);
  }
  void add_testarrayoftables(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> testarrayoftables) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFTABLES, testarrayoftables);
  }
  void add_enemy(flatbuffers::Offset<Monster> enemy) {
    fbb_.AddOffset(Monster::VT_ENEMY, enemy);
  }
  void add_testnestedflatbuffer(flatbuffers::Offset<flatbuffers::Vector<u8>> testnestedflatbuffer) {
    fbb_.AddOffset(Monster::VT_TESTNESTEDFLATBUFFER, testnestedflatbuffer);
  }
  void add_testempty(flatbuffers::Offset<Stat> testempty) {
    fbb_.AddOffset(Monster::VT_TESTEMPTY, testempty);
  }
  void add_testbool(bool testbool) {
    fbb_.AddElement<bool>(Monster::VT_TESTBOOL, static_cast<bool>(testbool), 0);
  }
  void add_testhashs32_fnv1(i32 testhashs32_fnv1) {
    fbb_.AddElement<i32>(Monster::VT_TESTHASHS32_FNV1, testhashs32_fnv1, 0);
  }
  void add_testhashu32_fnv1(u32 testhashu32_fnv1) {
    fbb_.AddElement<u32>(Monster::VT_TESTHASHU32_FNV1, testhashu32_fnv1, 0);
  }
  void add_testhashs64_fnv1(i64 testhashs64_fnv1) {
    fbb_.AddElement<i64>(Monster::VT_TESTHASHS64_FNV1, testhashs64_fnv1, 0);
  }
  void add_testhashu64_fnv1(u64 testhashu64_fnv1) {
    fbb_.AddElement<u64>(Monster::VT_TESTHASHU64_FNV1, testhashu64_fnv1, 0);
  }
  void add_testhashs32_fnv1a(i32 testhashs32_fnv1a) {
    fbb_.AddElement<i32>(Monster::VT_TESTHASHS32_FNV1A, testhashs32_fnv1a, 0);
  }
  void add_testhashu32_fnv1a(u32 testhashu32_fnv1a) {
    fbb_.AddElement<u32>(Monster::VT_TESTHASHU32_FNV1A, testhashu32_fnv1a, 0);
  }
  void add_testhashs64_fnv1a(i64 testhashs64_fnv1a) {
    fbb_.AddElement<i64>(Monster::VT_TESTHASHS64_FNV1A, testhashs64_fnv1a, 0);
  }
  void add_testhashu64_fnv1a(u64 testhashu64_fnv1a) {
    fbb_.AddElement<u64>(Monster::VT_TESTHASHU64_FNV1A, testhashu64_fnv1a, 0);
  }
  void add_testarrayofbools(flatbuffers::Offset<flatbuffers::Vector<bool>> testarrayofbools) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFBOOLS, testarrayofbools);
  }
  void add_testf(f32 testf) {
    fbb_.AddElement<f32>(Monster::VT_TESTF, testf, 3.14159f);
  }
  void add_testf2(f32 testf2) {
    fbb_.AddElement<f32>(Monster::VT_TESTF2, testf2, 3.0f);
  }
  void add_testf3(f32 testf3) {
    fbb_.AddElement<f32>(Monster::VT_TESTF3, testf3, 0.0f);
  }
  void add_testarrayofstring2(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> testarrayofstring2) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING2, testarrayofstring2);
  }
  void add_testarrayofsortedstruct(flatbuffers::Offset<flatbuffers::Vector<const Ability *>> testarrayofsortedstruct) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSORTEDSTRUCT, testarrayofsortedstruct);
  }
  void add_flex(flatbuffers::Offset<flatbuffers::Vector<u8>> flex) {
    fbb_.AddOffset(Monster::VT_FLEX, flex);
  }
  void add_test5(flatbuffers::Offset<flatbuffers::Vector<const Test *>> test5) {
    fbb_.AddOffset(Monster::VT_TEST5, test5);
  }
  void add_vector_of_longs(flatbuffers::Offset<flatbuffers::Vector<i64>> vector_of_longs) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_LONGS, vector_of_longs);
  }
  void add_vector_of_doubles(flatbuffers::Offset<flatbuffers::Vector<f64>> vector_of_doubles) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_DOUBLES, vector_of_doubles);
  }
  void add_parent_namespace_test(flatbuffers::Offset<MyGame::InParentNamespace> parent_namespace_test) {
    fbb_.AddOffset(Monster::VT_PARENT_NAMESPACE_TEST, parent_namespace_test);
  }
  explicit MonsterBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MonsterBuilder &operator=(const MonsterBuilder &);
  flatbuffers::Offset<Monster> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Monster>(end);
    fbb_.Required(o, Monster::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<Monster> CreateMonster(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    i16 mana = 150,
    i16 hp = 100,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<u8>> inventory = 0,
    Color color = Color_Blue,
    Any test_type = Any_NONE,
    flatbuffers::Offset<void> test = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Test *>> test4 = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> testarrayofstring = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> testarrayoftables = 0,
    flatbuffers::Offset<Monster> enemy = 0,
    flatbuffers::Offset<flatbuffers::Vector<u8>> testnestedflatbuffer = 0,
    flatbuffers::Offset<Stat> testempty = 0,
    bool testbool = false,
    i32 testhashs32_fnv1 = 0,
    u32 testhashu32_fnv1 = 0,
    i64 testhashs64_fnv1 = 0,
    u64 testhashu64_fnv1 = 0,
    i32 testhashs32_fnv1a = 0,
    u32 testhashu32_fnv1a = 0,
    i64 testhashs64_fnv1a = 0,
    u64 testhashu64_fnv1a = 0,
    flatbuffers::Offset<flatbuffers::Vector<bool>> testarrayofbools = 0,
    f32 testf = 3.14159f,
    f32 testf2 = 3.0f,
    f32 testf3 = 0.0f,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> testarrayofstring2 = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Ability *>> testarrayofsortedstruct = 0,
    flatbuffers::Offset<flatbuffers::Vector<u8>> flex = 0,
    flatbuffers::Offset<flatbuffers::Vector<const Test *>> test5 = 0,
    flatbuffers::Offset<flatbuffers::Vector<i64>> vector_of_longs = 0,
    flatbuffers::Offset<flatbuffers::Vector<f64>> vector_of_doubles = 0,
    flatbuffers::Offset<MyGame::InParentNamespace> parent_namespace_test = 0) {
  MonsterBuilder builder_(_fbb);
  builder_.add_testhashu64_fnv1a(testhashu64_fnv1a);
  builder_.add_testhashs64_fnv1a(testhashs64_fnv1a);
  builder_.add_testhashu64_fnv1(testhashu64_fnv1);
  builder_.add_testhashs64_fnv1(testhashs64_fnv1);
  builder_.add_parent_namespace_test(parent_namespace_test);
  builder_.add_vector_of_doubles(vector_of_doubles);
  builder_.add_vector_of_longs(vector_of_longs);
  builder_.add_test5(test5);
  builder_.add_flex(flex);
  builder_.add_testarrayofsortedstruct(testarrayofsortedstruct);
  builder_.add_testarrayofstring2(testarrayofstring2);
  builder_.add_testf3(testf3);
  builder_.add_testf2(testf2);
  builder_.add_testf(testf);
  builder_.add_testarrayofbools(testarrayofbools);
  builder_.add_testhashu32_fnv1a(testhashu32_fnv1a);
  builder_.add_testhashs32_fnv1a(testhashs32_fnv1a);
  builder_.add_testhashu32_fnv1(testhashu32_fnv1);
  builder_.add_testhashs32_fnv1(testhashs32_fnv1);
  builder_.add_testempty(testempty);
  builder_.add_testnestedflatbuffer(testnestedflatbuffer);
  builder_.add_enemy(enemy);
  builder_.add_testarrayoftables(testarrayoftables);
  builder_.add_testarrayofstring(testarrayofstring);
  builder_.add_test4(test4);
  builder_.add_test(test);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_testbool(testbool);
  builder_.add_test_type(test_type);
  builder_.add_color(color);
  return builder_.Finish();
}

inline flatbuffers::Offset<Monster> CreateMonsterDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vec3 *pos = 0,
    i16 mana = 150,
    i16 hp = 100,
    const char *name = nullptr,
    const std::vector<u8> *inventory = nullptr,
    Color color = Color_Blue,
    Any test_type = Any_NONE,
    flatbuffers::Offset<void> test = 0,
    const std::vector<Test> *test4 = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *testarrayofstring = nullptr,
    const std::vector<flatbuffers::Offset<Monster>> *testarrayoftables = nullptr,
    flatbuffers::Offset<Monster> enemy = 0,
    const std::vector<u8> *testnestedflatbuffer = nullptr,
    flatbuffers::Offset<Stat> testempty = 0,
    bool testbool = false,
    i32 testhashs32_fnv1 = 0,
    u32 testhashu32_fnv1 = 0,
    i64 testhashs64_fnv1 = 0,
    u64 testhashu64_fnv1 = 0,
    i32 testhashs32_fnv1a = 0,
    u32 testhashu32_fnv1a = 0,
    i64 testhashs64_fnv1a = 0,
    u64 testhashu64_fnv1a = 0,
    const std::vector<bool> *testarrayofbools = nullptr,
    f32 testf = 3.14159f,
    f32 testf2 = 3.0f,
    f32 testf3 = 0.0f,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *testarrayofstring2 = nullptr,
    const std::vector<Ability> *testarrayofsortedstruct = nullptr,
    const std::vector<u8> *flex = nullptr,
    const std::vector<Test> *test5 = nullptr,
    const std::vector<i64> *vector_of_longs = nullptr,
    const std::vector<f64> *vector_of_doubles = nullptr,
    flatbuffers::Offset<MyGame::InParentNamespace> parent_namespace_test = 0) {
  return MyGame::Example::CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      name ? _fbb.CreateString(name) : 0,
      inventory ? _fbb.CreateVector<u8>(*inventory) : 0,
      color,
      test_type,
      test,
      test4 ? _fbb.CreateVectorOfStructs<Test>(*test4) : 0,
      testarrayofstring ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring) : 0,
      testarrayoftables ? _fbb.CreateVector<flatbuffers::Offset<Monster>>(*testarrayoftables) : 0,
      enemy,
      testnestedflatbuffer ? _fbb.CreateVector<u8>(*testnestedflatbuffer) : 0,
      testempty,
      testbool,
      testhashs32_fnv1,
      testhashu32_fnv1,
      testhashs64_fnv1,
      testhashu64_fnv1,
      testhashs32_fnv1a,
      testhashu32_fnv1a,
      testhashs64_fnv1a,
      testhashu64_fnv1a,
      testarrayofbools ? _fbb.CreateVector<bool>(*testarrayofbools) : 0,
      testf,
      testf2,
      testf3,
      testarrayofstring2 ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring2) : 0,
      testarrayofsortedstruct ? _fbb.CreateVectorOfStructs<Ability>(*testarrayofsortedstruct) : 0,
      flex ? _fbb.CreateVector<u8>(*flex) : 0,
      test5 ? _fbb.CreateVectorOfStructs<Test>(*test5) : 0,
      vector_of_longs ? _fbb.CreateVector<i64>(*vector_of_longs) : 0,
      vector_of_doubles ? _fbb.CreateVector<f64>(*vector_of_doubles) : 0,
      parent_namespace_test);
}

struct TypeAliases FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_I8 = 4,
    VT_U8 = 6,
    VT_I16 = 8,
    VT_U16 = 10,
    VT_I32 = 12,
    VT_U32 = 14,
    VT_I64 = 16,
    VT_U64 = 18,
    VT_F32 = 20,
    VT_F64 = 22,
    VT_V8 = 24,
    VT_VF64 = 26
  };
  i8 i8() const {
    return GetField<i8>(VT_I8, 0);
  }
  u8 u8() const {
    return GetField<u8>(VT_U8, 0);
  }
  i16 i16() const {
    return GetField<i16>(VT_I16, 0);
  }
  u16 u16() const {
    return GetField<u16>(VT_U16, 0);
  }
  i32 i32() const {
    return GetField<i32>(VT_I32, 0);
  }
  u32 u32() const {
    return GetField<u32>(VT_U32, 0);
  }
  i64 i64() const {
    return GetField<i64>(VT_I64, 0);
  }
  u64 u64() const {
    return GetField<u64>(VT_U64, 0);
  }
  f32 f32() const {
    return GetField<f32>(VT_F32, 0.0f);
  }
  f64 f64() const {
    return GetField<f64>(VT_F64, 0.0);
  }
  const flatbuffers::Vector<i8> *v8() const {
    return GetPointer<const flatbuffers::Vector<i8> *>(VT_V8);
  }
  const flatbuffers::Vector<f64> *vf64() const {
    return GetPointer<const flatbuffers::Vector<f64> *>(VT_VF64);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<i8>(verifier, VT_I8) &&
           VerifyField<u8>(verifier, VT_U8) &&
           VerifyField<i16>(verifier, VT_I16) &&
           VerifyField<u16>(verifier, VT_U16) &&
           VerifyField<i32>(verifier, VT_I32) &&
           VerifyField<u32>(verifier, VT_U32) &&
           VerifyField<i64>(verifier, VT_I64) &&
           VerifyField<u64>(verifier, VT_U64) &&
           VerifyField<f32>(verifier, VT_F32) &&
           VerifyField<f64>(verifier, VT_F64) &&
           VerifyOffset(verifier, VT_V8) &&
           verifier.Verify(v8()) &&
           VerifyOffset(verifier, VT_VF64) &&
           verifier.Verify(vf64()) &&
           verifier.EndTable();
  }
};

struct TypeAliasesBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_i8(i8 i8) {
    fbb_.AddElement<i8>(TypeAliases::VT_I8, i8, 0);
  }
  void add_u8(u8 u8) {
    fbb_.AddElement<u8>(TypeAliases::VT_U8, u8, 0);
  }
  void add_i16(i16 i16) {
    fbb_.AddElement<i16>(TypeAliases::VT_I16, i16, 0);
  }
  void add_u16(u16 u16) {
    fbb_.AddElement<u16>(TypeAliases::VT_U16, u16, 0);
  }
  void add_i32(i32 i32) {
    fbb_.AddElement<i32>(TypeAliases::VT_I32, i32, 0);
  }
  void add_u32(u32 u32) {
    fbb_.AddElement<u32>(TypeAliases::VT_U32, u32, 0);
  }
  void add_i64(i64 i64) {
    fbb_.AddElement<i64>(TypeAliases::VT_I64, i64, 0);
  }
  void add_u64(u64 u64) {
    fbb_.AddElement<u64>(TypeAliases::VT_U64, u64, 0);
  }
  void add_f32(f32 f32) {
    fbb_.AddElement<f32>(TypeAliases::VT_F32, f32, 0.0f);
  }
  void add_f64(f64 f64) {
    fbb_.AddElement<f64>(TypeAliases::VT_F64, f64, 0.0);
  }
  void add_v8(flatbuffers::Offset<flatbuffers::Vector<i8>> v8) {
    fbb_.AddOffset(TypeAliases::VT_V8, v8);
  }
  void add_vf64(flatbuffers::Offset<flatbuffers::Vector<f64>> vf64) {
    fbb_.AddOffset(TypeAliases::VT_VF64, vf64);
  }
  explicit TypeAliasesBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TypeAliasesBuilder &operator=(const TypeAliasesBuilder &);
  flatbuffers::Offset<TypeAliases> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TypeAliases>(end);
    return o;
  }
};

inline flatbuffers::Offset<TypeAliases> CreateTypeAliases(
    flatbuffers::FlatBufferBuilder &_fbb,
    i8 i8 = 0,
    u8 u8 = 0,
    i16 i16 = 0,
    u16 u16 = 0,
    i32 i32 = 0,
    u32 u32 = 0,
    i64 i64 = 0,
    u64 u64 = 0,
    f32 f32 = 0.0f,
    f64 f64 = 0.0,
    flatbuffers::Offset<flatbuffers::Vector<i8>> v8 = 0,
    flatbuffers::Offset<flatbuffers::Vector<f64>> vf64 = 0) {
  TypeAliasesBuilder builder_(_fbb);
  builder_.add_f64(f64);
  builder_.add_u64(u64);
  builder_.add_i64(i64);
  builder_.add_vf64(vf64);
  builder_.add_v8(v8);
  builder_.add_f32(f32);
  builder_.add_u32(u32);
  builder_.add_i32(i32);
  builder_.add_u16(u16);
  builder_.add_i16(i16);
  builder_.add_u8(u8);
  builder_.add_i8(i8);
  return builder_.Finish();
}

inline flatbuffers::Offset<TypeAliases> CreateTypeAliasesDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    i8 i8 = 0,
    u8 u8 = 0,
    i16 i16 = 0,
    u16 u16 = 0,
    i32 i32 = 0,
    u32 u32 = 0,
    i64 i64 = 0,
    u64 u64 = 0,
    f32 f32 = 0.0f,
    f64 f64 = 0.0,
    const std::vector<i8> *v8 = nullptr,
    const std::vector<f64> *vf64 = nullptr) {
  return MyGame::Example::CreateTypeAliases(
      _fbb,
      i8,
      u8,
      i16,
      u16,
      i32,
      u32,
      i64,
      u64,
      f32,
      f64,
      v8 ? _fbb.CreateVector<i8>(*v8) : 0,
      vf64 ? _fbb.CreateVector<f64>(*vf64) : 0);
}

}  // namespace Example

namespace Example2 {

}  // namespace Example2

namespace Example {

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_Monster: {
      auto ptr = reinterpret_cast<const Monster *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_TestSimpleTableWithEnum: {
      auto ptr = reinterpret_cast<const TestSimpleTableWithEnum *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_MyGame_Example2_Monster: {
      auto ptr = reinterpret_cast<const MyGame::Example2::Monster *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

inline const MyGame::Example::Monster *GetMonster(const void *buf) {
  return flatbuffers::GetRoot<MyGame::Example::Monster>(buf);
}

inline const char *MonsterIdentifier() {
  return "MONS";
}

inline bool MonsterBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MonsterIdentifier());
}

inline bool VerifyMonsterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyGame::Example::Monster>(MonsterIdentifier());
}

inline const char *MonsterExtension() {
  return "mon";
}

inline void FinishMonsterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Example::Monster> root) {
  fbb.Finish(root, MonsterIdentifier());
}

}  // namespace Example
}  // namespace MyGame

#endif  // FLATBUFFERS_GENERATED_MONSTERTEST_MYGAME_EXAMPLE_H_
