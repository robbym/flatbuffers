// automatically generated by the FlatBuffers compiler, do not modify


extern crate flatbuffers;

mod MyGame {
mod Example {

enum Color {
  Color_Red = 1,
  Color_Green = 2,
  Color_Blue = 8,
  Color_NONE = 0,
  Color_ANY = 11
}

const EnumValuesColor:[Color; 3] = [
  Color_Red,
  Color_Green,
  Color_Blue
];

const EnumNamesColor:[&'static str; 8] = [
    "Red",
    "Green",
    "",
    "",
    "",
    "",
    "",
    "Blue"
];

fn EnumNameColor(e: Color) -> &'static str {
  let index: usize = e as usize - Color_Red as usize;
  EnumNamesColor[index]
}

enum Any {
  Any_NONE = 0,
  Any_Monster = 1,
  Any_TestSimpleTableWithEnum = 2,
  Any_MyGame_Example2_Monster = 3,
  Any_MIN = Any_NONE,
  Any_MAX = Any_MyGame_Example2_Monster
}

const EnumValuesAny:[Any; 4] = [
  Any_NONE,
  Any_Monster,
  Any_TestSimpleTableWithEnum,
  Any_MyGame_Example2_Monster
];

const EnumNamesAny:[&'static str; 4] = [
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster"
];

fn EnumNameAny(e: Any) -> &'static str {
  let index: usize = e as usize;
  EnumNamesAny[index]
}

// MANUALLY_ALIGNED_STRUCT(2)
#[repr(C, packed)]
pub struct Test {
  i16: a_,
  i8: b_,
  u8: padding0__,
} // pub struct Test

impl Test {
  fn Reset(&mut self) {
    memset(this, 0, size_of(Test));
  }
  fn init(&mut self, i16: _a, i8: _b) {
      self.a_ = flatbuffers::EndianScalar(_a);
      self.b_ = flatbuffers::EndianScalar(_b);

  }
  fn a(&self) -> i16  {
    flatbuffers::EndianScalar(self.a_)
  }
  fn mutate_a(&mut self, _a: i16) {
    flatbuffers::WriteScalar(&self.a_, _a);
  }
  fn b(&self) -> i8  {
    flatbuffers::EndianScalar(self.b_)
  }
  fn mutate_b(&mut self, _b: i8) {
    flatbuffers::WriteScalar(&self.b_, _b);
  }
}
// STRUCT_END(Test, 4);

// MANUALLY_ALIGNED_STRUCT(16)
#[repr(C, packed)]
pub struct Vec3 {
  f32: x_,
  f32: y_,
  f32: z_,
  u32: padding0__,
  f64: test1_,
  i8: test2_,
  u8: padding1__,
  Test: test3_,
  u16: padding2__,
} // pub struct Vec3

impl Vec3 {
  fn Reset(&mut self) {
    memset(this, 0, size_of(Vec3));
  }
  fn init(&mut self, f32: _x, f32: _y, f32: _z, f64: _test1, Color: _test2, &Test: _test3) {
      self.x_ = flatbuffers::EndianScalar(_x);
      self.y_ = flatbuffers::EndianScalar(_y);
      self.z_ = flatbuffers::EndianScalar(_z);
      self.test1_ = flatbuffers::EndianScalar(_test1);
      self.test2_ = flatbuffers::EndianScalar(_test2 as i8);
      self.test3_ = _test3;

  }
  fn x(&self) -> f32  {
    flatbuffers::EndianScalar(self.x_)
  }
  fn mutate_x(&mut self, _x: f32) {
    flatbuffers::WriteScalar(&self.x_, _x);
  }
  fn y(&self) -> f32  {
    flatbuffers::EndianScalar(self.y_)
  }
  fn mutate_y(&mut self, _y: f32) {
    flatbuffers::WriteScalar(&self.y_, _y);
  }
  fn z(&self) -> f32  {
    flatbuffers::EndianScalar(self.z_)
  }
  fn mutate_z(&mut self, _z: f32) {
    flatbuffers::WriteScalar(&self.z_, _z);
  }
  fn test1(&self) -> f64  {
    flatbuffers::EndianScalar(self.test1_)
  }
  fn mutate_test1(&mut self, _test1: f64) {
    flatbuffers::WriteScalar(&self.test1_, _test1);
  }
  fn test2(&self) -> Color  {
    flatbuffers::EndianScalar(self.test2_) as Color
  }
  fn mutate_test2(&mut self, _test2: Color) {
    flatbuffers::WriteScalar(&self.test2_, _test2 as i8);
  }
  fn test3(&self) -> &Test {
    self.test3_
  }
  fn mutable_test3(&mut self) -> &mut Test {
    self.test3_
  }
}
// STRUCT_END(Vec3, 32);

// MANUALLY_ALIGNED_STRUCT(4)
#[repr(C, packed)]
pub struct Ability {
  u32: id_,
  u32: distance_,
} // pub struct Ability

impl Ability {
  fn Reset(&mut self) {
    memset(this, 0, size_of(Ability));
  }
  fn init(&mut self, u32: _id, u32: _distance) {
      self.id_ = flatbuffers::EndianScalar(_id);
      self.distance_ = flatbuffers::EndianScalar(_distance);

  }
  fn id(&self) -> u32  {
    flatbuffers::EndianScalar(self.id_)
  }
  fn mutate_id(&mut self, _id: u32) {
    flatbuffers::WriteScalar(&self.id_, _id);
  }
  fn KeyCompareLessThan(o: &Ability) -> bool {
    self.id() < o.id()
  }
  fn KeyCompareWithValue(val: u32) -> isize {
    let key = id();
    (key > val) - (key < val)
  }
  fn distance(&self) -> u32  {
    flatbuffers::EndianScalar(self.distance_)
  }
  fn mutate_distance(&mut self, _distance: u32) {
    flatbuffers::WriteScalar(&self.distance_, _distance);
  }
}
// STRUCT_END(Ability, 8);

}  // mod Example

impl flatbuffers::Table for InParentNamespace {}
impl InParentNamespace /* private flatbuffers::Table */ {
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
}

struct InParentNamespaceBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl InParentNamespaceBuilder {
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> InParentNamespaceBuilder {
    InParentNamespaceBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // InParentNamespaceBuilder &operator=(const InParentNamespaceBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<InParentNamespace> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<InParentNamespace>;
    o
  }
}

#[inline]
fn CreateInParentNamespace(
    _fbb: &mut flatbuffers::FlatBufferBuilder) -> flatbuffers::Offset<InParentNamespace> {
  let mut builder = InParentNamespaceBuilder::new(_fbb);
  builder_.Finish()
}

mod Example2 {

impl flatbuffers::Table for Monster {}
impl Monster /* private flatbuffers::Table */ {
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
}

struct MonsterBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl MonsterBuilder {
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder {
    MonsterBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Monster> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Monster>;
    o
  }
}

#[inline]
fn CreateMonster(
    _fbb: &mut flatbuffers::FlatBufferBuilder) -> flatbuffers::Offset<Monster> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder_.Finish()
}

}  // mod Example2

mod Example {

impl flatbuffers::Table for TestSimpleTableWithEnum {}
impl TestSimpleTableWithEnum /* private flatbuffers::Table */ {
    const VT_COLOR: isize = 4;

  fn color() -> Color  {
    self.GetField::<i8>(VT_COLOR, 2) as Color
  }
  fn mutate_color(color_: Color) -> bool {
    SetField::<i8>(VT_COLOR, _color as i8, 2)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           VerifyField::<i8>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
}

struct TestSimpleTableWithEnumBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl TestSimpleTableWithEnumBuilder {
  fn add_color(color: Color ) {
    fbb_.AddElement::<i8>(TestSimpleTableWithEnum::VT_COLOR, color as i8, 2);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> TestSimpleTableWithEnumBuilder {
    TestSimpleTableWithEnumBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // TestSimpleTableWithEnumBuilder &operator=(const TestSimpleTableWithEnumBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<TestSimpleTableWithEnum> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<TestSimpleTableWithEnum>;
    o
  }
}

#[inline]
fn CreateTestSimpleTableWithEnum(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    color: Color  /* = Color_Green */) -> flatbuffers::Offset<TestSimpleTableWithEnum> {
  let mut builder = TestSimpleTableWithEnumBuilder::new(_fbb);
  builder_.add_color(color);
  builder_.Finish()
}

impl flatbuffers::Table for Stat {}
impl Stat /* private flatbuffers::Table */ {
    const VT_ID: isize = 4;
    const VT_VAL: isize = 6;
    const VT_COUNT: isize = 8;

  fn id() -> &flatbuffers::String  {
    self.GetPointer::<&flatbuffers::String>(VT_ID)
  }
  fn mutable_id(&mut self) -> &mut flatbuffers::String  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::String >(VT_ID)
  }
  fn val() -> i64  {
    self.GetField::<i64>(VT_VAL, 0)
  }
  fn mutate_val(val_: i64) -> bool {
    SetField::<i64>(VT_VAL, _val, 0)
  }
  fn count() -> u16  {
    self.GetField::<u16>(VT_COUNT, 0)
  }
  fn mutate_count(count_: u16) -> bool {
    SetField::<u16>(VT_COUNT, _count, 0)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField::<i64>(verifier, VT_VAL) &&
           VerifyField::<u16>(verifier, VT_COUNT) &&
           verifier.EndTable();
  }
}

struct StatBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl StatBuilder {
  fn add_id(id: flatbuffers::Offset<flatbuffers::String> ) {
    fbb_.AddOffset(Stat::VT_ID, id);
  }
  fn add_val(val: i64 ) {
    fbb_.AddElement::<i64>(Stat::VT_VAL, val, 0);
  }
  fn add_count(count: u16 ) {
    fbb_.AddElement::<u16>(Stat::VT_COUNT, count, 0);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> StatBuilder {
    StatBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // StatBuilder &operator=(const StatBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Stat> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Stat>;
    o
  }
}

#[inline]
fn CreateStat(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    id: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */) -> flatbuffers::Offset<Stat> {
  let mut builder = StatBuilder::new(_fbb);
  builder_.add_val(val);
  builder_.add_id(id);
  builder_.add_count(count);
  builder_.Finish()
}

#[inline]
fn CreateStatDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    id: const_char_string_ptr /* = nullptr */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */) -> flatbuffers::Offset<Stat> {
  return MyGame::Example::CreateStat(
      _fbb,
      if id { _fbb.CreateString(id) } else { 0 },
      val,
      count);
}

/// an example documentation comment: monster object
impl flatbuffers::Table for Monster {}
impl Monster /* private flatbuffers::Table */ {
    const VT_POS: isize = 4;
    const VT_MANA: isize = 6;
    const VT_HP: isize = 8;
    const VT_NAME: isize = 10;
    const VT_INVENTORY: isize = 14;
    const VT_COLOR: isize = 16;
    const VT_TEST_TYPE: isize = 18;
    const VT_TEST: isize = 20;
    const VT_TEST4: isize = 22;
    const VT_TESTARRAYOFSTRING: isize = 24;
    const VT_TESTARRAYOFTABLES: isize = 26;
    const VT_ENEMY: isize = 28;
    const VT_TESTNESTEDFLATBUFFER: isize = 30;
    const VT_TESTEMPTY: isize = 32;
    const VT_TESTBOOL: isize = 34;
    const VT_TESTHASHS32_FNV1: isize = 36;
    const VT_TESTHASHU32_FNV1: isize = 38;
    const VT_TESTHASHS64_FNV1: isize = 40;
    const VT_TESTHASHU64_FNV1: isize = 42;
    const VT_TESTHASHS32_FNV1A: isize = 44;
    const VT_TESTHASHU32_FNV1A: isize = 46;
    const VT_TESTHASHS64_FNV1A: isize = 48;
    const VT_TESTHASHU64_FNV1A: isize = 50;
    const VT_TESTARRAYOFBOOLS: isize = 52;
    const VT_TESTF: isize = 54;
    const VT_TESTF2: isize = 56;
    const VT_TESTF3: isize = 58;
    const VT_TESTARRAYOFSTRING2: isize = 60;
    const VT_TESTARRAYOFSORTEDSTRUCT: isize = 62;
    const VT_FLEX: isize = 64;
    const VT_TEST5: isize = 66;
    const VT_VECTOR_OF_LONGS: isize = 68;
    const VT_VECTOR_OF_DOUBLES: isize = 70;
    const VT_PARENT_NAMESPACE_TEST: isize = 72;

  fn pos() -> &Vec3  {
    self.GetStruct::<&Vec3>(VT_POS)
  }
  fn mutable_pos(&mut self) -> &mut Vec3  {
    /* TODO: are there non-reference choices here? */
    &mut GetStruct::<&mut Vec3 >(VT_POS)
  }
  fn mana() -> i16  {
    self.GetField::<i16>(VT_MANA, 150)
  }
  fn mutate_mana(mana_: i16) -> bool {
    SetField::<i16>(VT_MANA, _mana, 150)
  }
  fn hp() -> i16  {
    self.GetField::<i16>(VT_HP, 100)
  }
  fn mutate_hp(hp_: i16) -> bool {
    SetField::<i16>(VT_HP, _hp, 100)
  }
  fn name() -> &flatbuffers::String  {
    self.GetPointer::<&flatbuffers::String>(VT_NAME)
  }
  fn mutable_name(&mut self) -> &mut flatbuffers::String  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::String >(VT_NAME)
  }
  fn KeyCompareLessThan(o: &Monster) -> bool {
    return *name() < *o.name();
  }
  fn KeyCompareWithValue(val: &const_char) -> isize {
    return strcmp(name().c_str(), val);
  }
  fn inventory() -> &flatbuffers::Vector<u8>  {
    self.GetPointer::<&flatbuffers::Vector<u8>>(VT_INVENTORY)
  }
  fn mutable_inventory(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(VT_INVENTORY)
  }
  fn color() -> Color  {
    self.GetField::<i8>(VT_COLOR, 8) as Color
  }
  fn mutate_color(color_: Color) -> bool {
    SetField::<i8>(VT_COLOR, _color as i8, 8)
  }
  fn test_type() -> Any  {
    self.GetField::<u8>(VT_TEST_TYPE, 0) as Any
  }
  fn mutate_test_type(test_type_: Any) -> bool {
    SetField::<u8>(VT_TEST_TYPE, _test_type as u8, 0)
  }
  fn test() -> &void  {
    self.GetPointer::<&void>(VT_TEST)
  }
  // TODO(?) template<typename T> const T *test_as() const;
  fn test_as_Monster() -> &Monster {
    if test_type() == Any_Monster { static_cast::<&Monster>(test()) } else { nullptr }
  }
  fn test_as_TestSimpleTableWithEnum() -> &TestSimpleTableWithEnum {
    if test_type() == Any_TestSimpleTableWithEnum { static_cast::<&TestSimpleTableWithEnum>(test()) } else { nullptr }
  }
  fn test_as_MyGame_Example2_Monster() -> &MyGame::Example2::Monster {
    if test_type() == Any_MyGame_Example2_Monster { static_cast::<&MyGame::Example2::Monster>(test()) } else { nullptr }
  }
  fn mutable_test(&mut self) -> &mut void  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut void >(VT_TEST)
  }
  fn test4() -> &flatbuffers::Vector<&Test>  {
    self.GetPointer::<&flatbuffers::Vector<&Test>>(VT_TEST4)
  }
  fn mutable_test4(&mut self) -> &mut flatbuffers::Vector<&Test>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Test> >(VT_TEST4)
  }
  fn testarrayofstring() -> &flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>(VT_TESTARRAYOFSTRING)
  }
  fn mutable_testarrayofstring(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> >(VT_TESTARRAYOFSTRING)
  }
  /// an example documentation comment: this will end up in the generated code
  /// multiline too
  fn testarrayoftables() -> &flatbuffers::Vector<flatbuffers::Offset<Monster>>  {
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<Monster>>>(VT_TESTARRAYOFTABLES)
  }
  fn mutable_testarrayoftables(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<Monster>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<Monster>> >(VT_TESTARRAYOFTABLES)
  }
  fn enemy() -> &Monster  {
    self.GetPointer::<&Monster>(VT_ENEMY)
  }
  fn mutable_enemy(&mut self) -> &mut Monster  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut Monster >(VT_ENEMY)
  }
  fn testnestedflatbuffer() -> &flatbuffers::Vector<u8>  {
    self.GetPointer::<&flatbuffers::Vector<u8>>(VT_TESTNESTEDFLATBUFFER)
  }
  fn mutable_testnestedflatbuffer(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(VT_TESTNESTEDFLATBUFFER)
  }
  fn testnestedflatbuffer_nested_root() -> &MyGame::Example::Monster{
    return flatbuffers::GetRoot::<MyGame::Example::Monster>(testnestedflatbuffer().Data());
  }
  fn testempty() -> &Stat  {
    self.GetPointer::<&Stat>(VT_TESTEMPTY)
  }
  fn mutable_testempty(&mut self) -> &mut Stat  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut Stat >(VT_TESTEMPTY)
  }
  fn testbool() -> bool  {
    self.GetField::<bool>(VT_TESTBOOL, 0) != 0
  }
  fn mutate_testbool(testbool_: bool) -> bool {
    SetField::<bool>(VT_TESTBOOL, _testbool as bool, 0)
  }
  fn testhashs32_fnv1() -> i32  {
    self.GetField::<i32>(VT_TESTHASHS32_FNV1, 0)
  }
  fn mutate_testhashs32_fnv1(testhashs32_fnv1_: i32) -> bool {
    SetField::<i32>(VT_TESTHASHS32_FNV1, _testhashs32_fnv1, 0)
  }
  fn testhashu32_fnv1() -> u32  {
    self.GetField::<u32>(VT_TESTHASHU32_FNV1, 0)
  }
  fn mutate_testhashu32_fnv1(testhashu32_fnv1_: u32) -> bool {
    SetField::<u32>(VT_TESTHASHU32_FNV1, _testhashu32_fnv1, 0)
  }
  fn testhashs64_fnv1() -> i64  {
    self.GetField::<i64>(VT_TESTHASHS64_FNV1, 0)
  }
  fn mutate_testhashs64_fnv1(testhashs64_fnv1_: i64) -> bool {
    SetField::<i64>(VT_TESTHASHS64_FNV1, _testhashs64_fnv1, 0)
  }
  fn testhashu64_fnv1() -> u64  {
    self.GetField::<u64>(VT_TESTHASHU64_FNV1, 0)
  }
  fn mutate_testhashu64_fnv1(testhashu64_fnv1_: u64) -> bool {
    SetField::<u64>(VT_TESTHASHU64_FNV1, _testhashu64_fnv1, 0)
  }
  fn testhashs32_fnv1a() -> i32  {
    self.GetField::<i32>(VT_TESTHASHS32_FNV1A, 0)
  }
  fn mutate_testhashs32_fnv1a(testhashs32_fnv1a_: i32) -> bool {
    SetField::<i32>(VT_TESTHASHS32_FNV1A, _testhashs32_fnv1a, 0)
  }
  fn testhashu32_fnv1a() -> u32  {
    self.GetField::<u32>(VT_TESTHASHU32_FNV1A, 0)
  }
  fn mutate_testhashu32_fnv1a(testhashu32_fnv1a_: u32) -> bool {
    SetField::<u32>(VT_TESTHASHU32_FNV1A, _testhashu32_fnv1a, 0)
  }
  fn testhashs64_fnv1a() -> i64  {
    self.GetField::<i64>(VT_TESTHASHS64_FNV1A, 0)
  }
  fn mutate_testhashs64_fnv1a(testhashs64_fnv1a_: i64) -> bool {
    SetField::<i64>(VT_TESTHASHS64_FNV1A, _testhashs64_fnv1a, 0)
  }
  fn testhashu64_fnv1a() -> u64  {
    self.GetField::<u64>(VT_TESTHASHU64_FNV1A, 0)
  }
  fn mutate_testhashu64_fnv1a(testhashu64_fnv1a_: u64) -> bool {
    SetField::<u64>(VT_TESTHASHU64_FNV1A, _testhashu64_fnv1a, 0)
  }
  fn testarrayofbools() -> &flatbuffers::Vector<bool>  {
    self.GetPointer::<&flatbuffers::Vector<bool>>(VT_TESTARRAYOFBOOLS)
  }
  fn mutable_testarrayofbools(&mut self) -> &mut flatbuffers::Vector<bool>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<bool> >(VT_TESTARRAYOFBOOLS)
  }
  fn testf() -> f32  {
    self.GetField::<f32>(VT_TESTF, 3.14159f)
  }
  fn mutate_testf(testf_: f32) -> bool {
    SetField::<f32>(VT_TESTF, _testf, 3.14159f)
  }
  fn testf2() -> f32  {
    self.GetField::<f32>(VT_TESTF2, 3.0f)
  }
  fn mutate_testf2(testf2_: f32) -> bool {
    SetField::<f32>(VT_TESTF2, _testf2, 3.0f)
  }
  fn testf3() -> f32  {
    self.GetField::<f32>(VT_TESTF3, 0.0f)
  }
  fn mutate_testf3(testf3_: f32) -> bool {
    SetField::<f32>(VT_TESTF3, _testf3, 0.0f)
  }
  fn testarrayofstring2() -> &flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>(VT_TESTARRAYOFSTRING2)
  }
  fn mutable_testarrayofstring2(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> >(VT_TESTARRAYOFSTRING2)
  }
  fn testarrayofsortedstruct() -> &flatbuffers::Vector<&Ability>  {
    self.GetPointer::<&flatbuffers::Vector<&Ability>>(VT_TESTARRAYOFSORTEDSTRUCT)
  }
  fn mutable_testarrayofsortedstruct(&mut self) -> &mut flatbuffers::Vector<&Ability>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Ability> >(VT_TESTARRAYOFSORTEDSTRUCT)
  }
  fn flex() -> &flatbuffers::Vector<u8>  {
    self.GetPointer::<&flatbuffers::Vector<u8>>(VT_FLEX)
  }
  fn mutable_flex(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(VT_FLEX)
  }
  flexbuffers::Reference flex_flexbuffer_root() const {
    auto v = flex();
    return flexbuffers::GetRoot(v->Data(), v->size());
  }
  fn test5() -> &flatbuffers::Vector<&Test>  {
    self.GetPointer::<&flatbuffers::Vector<&Test>>(VT_TEST5)
  }
  fn mutable_test5(&mut self) -> &mut flatbuffers::Vector<&Test>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Test> >(VT_TEST5)
  }
  fn vector_of_longs() -> &flatbuffers::Vector<i64>  {
    self.GetPointer::<&flatbuffers::Vector<i64>>(VT_VECTOR_OF_LONGS)
  }
  fn mutable_vector_of_longs(&mut self) -> &mut flatbuffers::Vector<i64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<i64> >(VT_VECTOR_OF_LONGS)
  }
  fn vector_of_doubles() -> &flatbuffers::Vector<f64>  {
    self.GetPointer::<&flatbuffers::Vector<f64>>(VT_VECTOR_OF_DOUBLES)
  }
  fn mutable_vector_of_doubles(&mut self) -> &mut flatbuffers::Vector<f64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<f64> >(VT_VECTOR_OF_DOUBLES)
  }
  fn parent_namespace_test() -> &MyGame::InParentNamespace  {
    self.GetPointer::<&MyGame::InParentNamespace>(VT_PARENT_NAMESPACE_TEST)
  }
  fn mutable_parent_namespace_test(&mut self) -> &mut MyGame::InParentNamespace  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut MyGame::InParentNamespace >(VT_PARENT_NAMESPACE_TEST)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           VerifyField::<Vec3>(verifier, VT_POS) &&
           VerifyField::<i16>(verifier, VT_MANA) &&
           VerifyField::<i16>(verifier, VT_HP) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.Verify(inventory()) &&
           VerifyField::<i8>(verifier, VT_COLOR) &&
           VerifyField::<u8>(verifier, VT_TEST_TYPE) &&
           VerifyOffset(verifier, VT_TEST) &&
           VerifyAny(verifier, test(), test_type()) &&
           VerifyOffset(verifier, VT_TEST4) &&
           verifier.Verify(test4()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING) &&
           verifier.Verify(testarrayofstring()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFTABLES) &&
           verifier.Verify(testarrayoftables()) &&
           verifier.VerifyVectorOfTables(testarrayoftables()) &&
           VerifyOffset(verifier, VT_ENEMY) &&
           verifier.VerifyTable(enemy()) &&
           VerifyOffset(verifier, VT_TESTNESTEDFLATBUFFER) &&
           verifier.Verify(testnestedflatbuffer()) &&
           VerifyOffset(verifier, VT_TESTEMPTY) &&
           verifier.VerifyTable(testempty()) &&
           VerifyField::<bool>(verifier, VT_TESTBOOL) &&
           VerifyField::<i32>(verifier, VT_TESTHASHS32_FNV1) &&
           VerifyField::<u32>(verifier, VT_TESTHASHU32_FNV1) &&
           VerifyField::<i64>(verifier, VT_TESTHASHS64_FNV1) &&
           VerifyField::<u64>(verifier, VT_TESTHASHU64_FNV1) &&
           VerifyField::<i32>(verifier, VT_TESTHASHS32_FNV1A) &&
           VerifyField::<u32>(verifier, VT_TESTHASHU32_FNV1A) &&
           VerifyField::<i64>(verifier, VT_TESTHASHS64_FNV1A) &&
           VerifyField::<u64>(verifier, VT_TESTHASHU64_FNV1A) &&
           VerifyOffset(verifier, VT_TESTARRAYOFBOOLS) &&
           verifier.Verify(testarrayofbools()) &&
           VerifyField::<f32>(verifier, VT_TESTF) &&
           VerifyField::<f32>(verifier, VT_TESTF2) &&
           VerifyField::<f32>(verifier, VT_TESTF3) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING2) &&
           verifier.Verify(testarrayofstring2()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring2()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSORTEDSTRUCT) &&
           verifier.Verify(testarrayofsortedstruct()) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.Verify(flex()) &&
           VerifyOffset(verifier, VT_TEST5) &&
           verifier.Verify(test5()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_LONGS) &&
           verifier.Verify(vector_of_longs()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_DOUBLES) &&
           verifier.Verify(vector_of_doubles()) &&
           VerifyOffset(verifier, VT_PARENT_NAMESPACE_TEST) &&
           verifier.VerifyTable(parent_namespace_test()) &&
           verifier.EndTable();
  }
}

template<> inline const Monster *Monster::test_as<Monster>() const {
  return test_as_Monster();
}

template<> inline const TestSimpleTableWithEnum *Monster::test_as<TestSimpleTableWithEnum>() const {
  return test_as_TestSimpleTableWithEnum();
}

template<> inline const MyGame::Example2::Monster *Monster::test_as<MyGame::Example2::Monster>() const {
  return test_as_MyGame_Example2_Monster();
}

struct MonsterBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl MonsterBuilder {
  fn add_pos(pos: &Vec3) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  fn add_mana(mana: i16 ) {
    fbb_.AddElement::<i16>(Monster::VT_MANA, mana, 150);
  }
  fn add_hp(hp: i16 ) {
    fbb_.AddElement::<i16>(Monster::VT_HP, hp, 100);
  }
  fn add_name(name: flatbuffers::Offset<flatbuffers::String> ) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  fn add_inventory(inventory: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  fn add_color(color: Color ) {
    fbb_.AddElement::<i8>(Monster::VT_COLOR, color as i8, 8);
  }
  fn add_test_type(test_type: Any ) {
    fbb_.AddElement::<u8>(Monster::VT_TEST_TYPE, test_type as u8, 0);
  }
  fn add_test(test: flatbuffers::Offset<void> ) {
    fbb_.AddOffset(Monster::VT_TEST, test);
  }
  fn add_test4(test4: flatbuffers::Offset<flatbuffers::Vector<&Test>> ) {
    fbb_.AddOffset(Monster::VT_TEST4, test4);
  }
  fn add_testarrayofstring(testarrayofstring: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING, testarrayofstring);
  }
  fn add_testarrayoftables(testarrayoftables: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFTABLES, testarrayoftables);
  }
  fn add_enemy(enemy: flatbuffers::Offset<Monster> ) {
    fbb_.AddOffset(Monster::VT_ENEMY, enemy);
  }
  fn add_testnestedflatbuffer(testnestedflatbuffer: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_TESTNESTEDFLATBUFFER, testnestedflatbuffer);
  }
  fn add_testempty(testempty: flatbuffers::Offset<Stat> ) {
    fbb_.AddOffset(Monster::VT_TESTEMPTY, testempty);
  }
  fn add_testbool(testbool: bool ) {
    fbb_.AddElement::<bool>(Monster::VT_TESTBOOL, testbool as bool, 0);
  }
  fn add_testhashs32_fnv1(testhashs32_fnv1: i32 ) {
    fbb_.AddElement::<i32>(Monster::VT_TESTHASHS32_FNV1, testhashs32_fnv1, 0);
  }
  fn add_testhashu32_fnv1(testhashu32_fnv1: u32 ) {
    fbb_.AddElement::<u32>(Monster::VT_TESTHASHU32_FNV1, testhashu32_fnv1, 0);
  }
  fn add_testhashs64_fnv1(testhashs64_fnv1: i64 ) {
    fbb_.AddElement::<i64>(Monster::VT_TESTHASHS64_FNV1, testhashs64_fnv1, 0);
  }
  fn add_testhashu64_fnv1(testhashu64_fnv1: u64 ) {
    fbb_.AddElement::<u64>(Monster::VT_TESTHASHU64_FNV1, testhashu64_fnv1, 0);
  }
  fn add_testhashs32_fnv1a(testhashs32_fnv1a: i32 ) {
    fbb_.AddElement::<i32>(Monster::VT_TESTHASHS32_FNV1A, testhashs32_fnv1a, 0);
  }
  fn add_testhashu32_fnv1a(testhashu32_fnv1a: u32 ) {
    fbb_.AddElement::<u32>(Monster::VT_TESTHASHU32_FNV1A, testhashu32_fnv1a, 0);
  }
  fn add_testhashs64_fnv1a(testhashs64_fnv1a: i64 ) {
    fbb_.AddElement::<i64>(Monster::VT_TESTHASHS64_FNV1A, testhashs64_fnv1a, 0);
  }
  fn add_testhashu64_fnv1a(testhashu64_fnv1a: u64 ) {
    fbb_.AddElement::<u64>(Monster::VT_TESTHASHU64_FNV1A, testhashu64_fnv1a, 0);
  }
  fn add_testarrayofbools(testarrayofbools: flatbuffers::Offset<flatbuffers::Vector<bool>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFBOOLS, testarrayofbools);
  }
  fn add_testf(testf: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF, testf, 3.14159f);
  }
  fn add_testf2(testf2: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF2, testf2, 3.0f);
  }
  fn add_testf3(testf3: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF3, testf3, 0.0f);
  }
  fn add_testarrayofstring2(testarrayofstring2: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING2, testarrayofstring2);
  }
  fn add_testarrayofsortedstruct(testarrayofsortedstruct: flatbuffers::Offset<flatbuffers::Vector<&Ability>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSORTEDSTRUCT, testarrayofsortedstruct);
  }
  fn add_flex(flex: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_FLEX, flex);
  }
  fn add_test5(test5: flatbuffers::Offset<flatbuffers::Vector<&Test>> ) {
    fbb_.AddOffset(Monster::VT_TEST5, test5);
  }
  fn add_vector_of_longs(vector_of_longs: flatbuffers::Offset<flatbuffers::Vector<i64>> ) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_LONGS, vector_of_longs);
  }
  fn add_vector_of_doubles(vector_of_doubles: flatbuffers::Offset<flatbuffers::Vector<f64>> ) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_DOUBLES, vector_of_doubles);
  }
  fn add_parent_namespace_test(parent_namespace_test: flatbuffers::Offset<MyGame::InParentNamespace> ) {
    fbb_.AddOffset(Monster::VT_PARENT_NAMESPACE_TEST, parent_namespace_test);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder {
    MonsterBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Monster> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Monster>;
    fbb_.Required(o, Monster::VT_NAME);
    o
  }
}

#[inline]
fn CreateMonster(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    pos: &Vec3 /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    inventory: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    color: Color  /* = Color_Blue */,
    test_type: Any  /* = Any_NONE */,
    test: flatbuffers::Offset<void>  /* = 0 */,
    test4: flatbuffers::Offset<flatbuffers::Vector<&Test>>  /* = 0 */,
    testarrayofstring: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>  /* = 0 */,
    testarrayoftables: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>>  /* = 0 */,
    enemy: flatbuffers::Offset<Monster>  /* = 0 */,
    testnestedflatbuffer: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    testempty: flatbuffers::Offset<Stat>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: flatbuffers::Offset<flatbuffers::Vector<bool>>  /* = 0 */,
    testf: f32  /* = 3.14159f */,
    testf2: f32  /* = 3.0f */,
    testf3: f32  /* = 0.0f */,
    testarrayofstring2: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>  /* = 0 */,
    testarrayofsortedstruct: flatbuffers::Offset<flatbuffers::Vector<&Ability>>  /* = 0 */,
    flex: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    test5: flatbuffers::Offset<flatbuffers::Vector<&Test>>  /* = 0 */,
    vector_of_longs: flatbuffers::Offset<flatbuffers::Vector<i64>>  /* = 0 */,
    vector_of_doubles: flatbuffers::Offset<flatbuffers::Vector<f64>>  /* = 0 */,
    parent_namespace_test: flatbuffers::Offset<MyGame::InParentNamespace>  /* = 0 */) -> flatbuffers::Offset<Monster> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder_.add_testhashu64_fnv1a(testhashu64_fnv1a);
  builder_.add_testhashs64_fnv1a(testhashs64_fnv1a);
  builder_.add_testhashu64_fnv1(testhashu64_fnv1);
  builder_.add_testhashs64_fnv1(testhashs64_fnv1);
  builder_.add_parent_namespace_test(parent_namespace_test);
  builder_.add_vector_of_doubles(vector_of_doubles);
  builder_.add_vector_of_longs(vector_of_longs);
  builder_.add_test5(test5);
  builder_.add_flex(flex);
  builder_.add_testarrayofsortedstruct(testarrayofsortedstruct);
  builder_.add_testarrayofstring2(testarrayofstring2);
  builder_.add_testf3(testf3);
  builder_.add_testf2(testf2);
  builder_.add_testf(testf);
  builder_.add_testarrayofbools(testarrayofbools);
  builder_.add_testhashu32_fnv1a(testhashu32_fnv1a);
  builder_.add_testhashs32_fnv1a(testhashs32_fnv1a);
  builder_.add_testhashu32_fnv1(testhashu32_fnv1);
  builder_.add_testhashs32_fnv1(testhashs32_fnv1);
  builder_.add_testempty(testempty);
  builder_.add_testnestedflatbuffer(testnestedflatbuffer);
  builder_.add_enemy(enemy);
  builder_.add_testarrayoftables(testarrayoftables);
  builder_.add_testarrayofstring(testarrayofstring);
  builder_.add_test4(test4);
  builder_.add_test(test);
  builder_.add_inventory(inventory);
  builder_.add_name(name);
  builder_.add_pos(pos);
  builder_.add_hp(hp);
  builder_.add_mana(mana);
  builder_.add_testbool(testbool);
  builder_.add_test_type(test_type);
  builder_.add_color(color);
  builder_.Finish()
}

#[inline]
fn CreateMonsterDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    pos: &Vec3 /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: const_char_string_ptr /* = nullptr */,
    inventory: const std::vector<u8> * /* = nullptr */,
    color: Color  /* = Color_Blue */,
    test_type: Any  /* = Any_NONE */,
    test: flatbuffers::Offset<void>  /* = 0 */,
    test4: const std::vector<Test> * /* = nullptr */,
    testarrayofstring: const std::vector<flatbuffers::Offset<flatbuffers::String>> * /* = nullptr */,
    testarrayoftables: const std::vector<flatbuffers::Offset<Monster>> * /* = nullptr */,
    enemy: flatbuffers::Offset<Monster>  /* = 0 */,
    testnestedflatbuffer: const std::vector<u8> * /* = nullptr */,
    testempty: flatbuffers::Offset<Stat>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: const std::vector<bool> * /* = nullptr */,
    testf: f32  /* = 3.14159f */,
    testf2: f32  /* = 3.0f */,
    testf3: f32  /* = 0.0f */,
    testarrayofstring2: const std::vector<flatbuffers::Offset<flatbuffers::String>> * /* = nullptr */,
    testarrayofsortedstruct: const std::vector<Ability> * /* = nullptr */,
    flex: const std::vector<u8> * /* = nullptr */,
    test5: const std::vector<Test> * /* = nullptr */,
    vector_of_longs: const std::vector<i64> * /* = nullptr */,
    vector_of_doubles: const std::vector<f64> * /* = nullptr */,
    parent_namespace_test: flatbuffers::Offset<MyGame::InParentNamespace>  /* = 0 */) -> flatbuffers::Offset<Monster> {
  return MyGame::Example::CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      if name { _fbb.CreateString(name) } else { 0 },
      inventory ? _fbb.CreateVector<u8>(*inventory) : 0,
      color,
      test_type,
      test,
      test4 ? _fbb.CreateVectorOfStructs<Test>(*test4) : 0,
      testarrayofstring ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring) : 0,
      testarrayoftables ? _fbb.CreateVector<flatbuffers::Offset<Monster>>(*testarrayoftables) : 0,
      enemy,
      testnestedflatbuffer ? _fbb.CreateVector<u8>(*testnestedflatbuffer) : 0,
      testempty,
      testbool,
      testhashs32_fnv1,
      testhashu32_fnv1,
      testhashs64_fnv1,
      testhashu64_fnv1,
      testhashs32_fnv1a,
      testhashu32_fnv1a,
      testhashs64_fnv1a,
      testhashu64_fnv1a,
      testarrayofbools ? _fbb.CreateVector<bool>(*testarrayofbools) : 0,
      testf,
      testf2,
      testf3,
      testarrayofstring2 ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring2) : 0,
      testarrayofsortedstruct ? _fbb.CreateVectorOfStructs<Ability>(*testarrayofsortedstruct) : 0,
      flex ? _fbb.CreateVector<u8>(*flex) : 0,
      test5 ? _fbb.CreateVectorOfStructs<Test>(*test5) : 0,
      vector_of_longs ? _fbb.CreateVector<i64>(*vector_of_longs) : 0,
      vector_of_doubles ? _fbb.CreateVector<f64>(*vector_of_doubles) : 0,
      parent_namespace_test);
}

impl flatbuffers::Table for TypeAliases {}
impl TypeAliases /* private flatbuffers::Table */ {
    const VT_I8: isize = 4;
    const VT_U8: isize = 6;
    const VT_I16: isize = 8;
    const VT_U16: isize = 10;
    const VT_I32: isize = 12;
    const VT_U32: isize = 14;
    const VT_I64: isize = 16;
    const VT_U64: isize = 18;
    const VT_F32: isize = 20;
    const VT_F64: isize = 22;
    const VT_V8: isize = 24;
    const VT_VF64: isize = 26;

  fn i8() -> i8  {
    self.GetField::<i8>(VT_I8, 0)
  }
  fn mutate_i8(i8_: i8) -> bool {
    SetField::<i8>(VT_I8, _i8, 0)
  }
  fn u8() -> u8  {
    self.GetField::<u8>(VT_U8, 0)
  }
  fn mutate_u8(u8_: u8) -> bool {
    SetField::<u8>(VT_U8, _u8, 0)
  }
  fn i16() -> i16  {
    self.GetField::<i16>(VT_I16, 0)
  }
  fn mutate_i16(i16_: i16) -> bool {
    SetField::<i16>(VT_I16, _i16, 0)
  }
  fn u16() -> u16  {
    self.GetField::<u16>(VT_U16, 0)
  }
  fn mutate_u16(u16_: u16) -> bool {
    SetField::<u16>(VT_U16, _u16, 0)
  }
  fn i32() -> i32  {
    self.GetField::<i32>(VT_I32, 0)
  }
  fn mutate_i32(i32_: i32) -> bool {
    SetField::<i32>(VT_I32, _i32, 0)
  }
  fn u32() -> u32  {
    self.GetField::<u32>(VT_U32, 0)
  }
  fn mutate_u32(u32_: u32) -> bool {
    SetField::<u32>(VT_U32, _u32, 0)
  }
  fn i64() -> i64  {
    self.GetField::<i64>(VT_I64, 0)
  }
  fn mutate_i64(i64_: i64) -> bool {
    SetField::<i64>(VT_I64, _i64, 0)
  }
  fn u64() -> u64  {
    self.GetField::<u64>(VT_U64, 0)
  }
  fn mutate_u64(u64_: u64) -> bool {
    SetField::<u64>(VT_U64, _u64, 0)
  }
  fn f32() -> f32  {
    self.GetField::<f32>(VT_F32, 0.0f)
  }
  fn mutate_f32(f32_: f32) -> bool {
    SetField::<f32>(VT_F32, _f32, 0.0f)
  }
  fn f64() -> f64  {
    self.GetField::<f64>(VT_F64, 0.0)
  }
  fn mutate_f64(f64_: f64) -> bool {
    SetField::<f64>(VT_F64, _f64, 0.0)
  }
  fn v8() -> &flatbuffers::Vector<i8>  {
    self.GetPointer::<&flatbuffers::Vector<i8>>(VT_V8)
  }
  fn mutable_v8(&mut self) -> &mut flatbuffers::Vector<i8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<i8> >(VT_V8)
  }
  fn vf64() -> &flatbuffers::Vector<f64>  {
    self.GetPointer::<&flatbuffers::Vector<f64>>(VT_VF64)
  }
  fn mutable_vf64(&mut self) -> &mut flatbuffers::Vector<f64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<f64> >(VT_VF64)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return VerifyTableStart(verifier) &&
           VerifyField::<i8>(verifier, VT_I8) &&
           VerifyField::<u8>(verifier, VT_U8) &&
           VerifyField::<i16>(verifier, VT_I16) &&
           VerifyField::<u16>(verifier, VT_U16) &&
           VerifyField::<i32>(verifier, VT_I32) &&
           VerifyField::<u32>(verifier, VT_U32) &&
           VerifyField::<i64>(verifier, VT_I64) &&
           VerifyField::<u64>(verifier, VT_U64) &&
           VerifyField::<f32>(verifier, VT_F32) &&
           VerifyField::<f64>(verifier, VT_F64) &&
           VerifyOffset(verifier, VT_V8) &&
           verifier.Verify(v8()) &&
           VerifyOffset(verifier, VT_VF64) &&
           verifier.Verify(vf64()) &&
           verifier.EndTable();
  }
}

struct TypeAliasesBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl TypeAliasesBuilder {
  fn add_i8(i8: i8 ) {
    fbb_.AddElement::<i8>(TypeAliases::VT_I8, i8, 0);
  }
  fn add_u8(u8: u8 ) {
    fbb_.AddElement::<u8>(TypeAliases::VT_U8, u8, 0);
  }
  fn add_i16(i16: i16 ) {
    fbb_.AddElement::<i16>(TypeAliases::VT_I16, i16, 0);
  }
  fn add_u16(u16: u16 ) {
    fbb_.AddElement::<u16>(TypeAliases::VT_U16, u16, 0);
  }
  fn add_i32(i32: i32 ) {
    fbb_.AddElement::<i32>(TypeAliases::VT_I32, i32, 0);
  }
  fn add_u32(u32: u32 ) {
    fbb_.AddElement::<u32>(TypeAliases::VT_U32, u32, 0);
  }
  fn add_i64(i64: i64 ) {
    fbb_.AddElement::<i64>(TypeAliases::VT_I64, i64, 0);
  }
  fn add_u64(u64: u64 ) {
    fbb_.AddElement::<u64>(TypeAliases::VT_U64, u64, 0);
  }
  fn add_f32(f32: f32 ) {
    fbb_.AddElement::<f32>(TypeAliases::VT_F32, f32, 0.0f);
  }
  fn add_f64(f64: f64 ) {
    fbb_.AddElement::<f64>(TypeAliases::VT_F64, f64, 0.0);
  }
  fn add_v8(v8: flatbuffers::Offset<flatbuffers::Vector<i8>> ) {
    fbb_.AddOffset(TypeAliases::VT_V8, v8);
  }
  fn add_vf64(vf64: flatbuffers::Offset<flatbuffers::Vector<f64>> ) {
    fbb_.AddOffset(TypeAliases::VT_VF64, vf64);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> TypeAliasesBuilder {
    TypeAliasesBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // TypeAliasesBuilder &operator=(const TypeAliasesBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<TypeAliases> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<TypeAliases>;
    o
  }
}

#[inline]
fn CreateTypeAliases(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    i8: i8  /* = 0 */,
    u8: u8  /* = 0 */,
    i16: i16  /* = 0 */,
    u16: u16  /* = 0 */,
    i32: i32  /* = 0 */,
    u32: u32  /* = 0 */,
    i64: i64  /* = 0 */,
    u64: u64  /* = 0 */,
    f32: f32  /* = 0.0f */,
    f64: f64  /* = 0.0 */,
    v8: flatbuffers::Offset<flatbuffers::Vector<i8>>  /* = 0 */,
    vf64: flatbuffers::Offset<flatbuffers::Vector<f64>>  /* = 0 */) -> flatbuffers::Offset<TypeAliases> {
  let mut builder = TypeAliasesBuilder::new(_fbb);
  builder_.add_f64(f64);
  builder_.add_u64(u64);
  builder_.add_i64(i64);
  builder_.add_vf64(vf64);
  builder_.add_v8(v8);
  builder_.add_f32(f32);
  builder_.add_u32(u32);
  builder_.add_i32(i32);
  builder_.add_u16(u16);
  builder_.add_i16(i16);
  builder_.add_u8(u8);
  builder_.add_i8(i8);
  builder_.Finish()
}

#[inline]
fn CreateTypeAliasesDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    i8: i8  /* = 0 */,
    u8: u8  /* = 0 */,
    i16: i16  /* = 0 */,
    u16: u16  /* = 0 */,
    i32: i32  /* = 0 */,
    u32: u32  /* = 0 */,
    i64: i64  /* = 0 */,
    u64: u64  /* = 0 */,
    f32: f32  /* = 0.0f */,
    f64: f64  /* = 0.0 */,
    v8: const std::vector<i8> * /* = nullptr */,
    vf64: const std::vector<f64> * /* = nullptr */) -> flatbuffers::Offset<TypeAliases> {
  return MyGame::Example::CreateTypeAliases(
      _fbb,
      i8,
      u8,
      i16,
      u16,
      i32,
      u32,
      i64,
      u64,
      f32,
      f64,
      v8 ? _fbb.CreateVector<i8>(*v8) : 0,
      vf64 ? _fbb.CreateVector<f64>(*vf64) : 0);
}

}  // mod Example

mod Example2 {

}  // mod Example2

mod Example {

inline bool VerifyAny(flatbuffers::Verifier &verifier, const void *obj, Any type) {
  switch (type) {
    case Any_NONE: {
      return true;
    }
    case Any_Monster: {
      auto ptr = reinterpret_cast<const Monster *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_TestSimpleTableWithEnum: {
      auto ptr = reinterpret_cast<const TestSimpleTableWithEnum *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Any_MyGame_Example2_Monster: {
      auto ptr = reinterpret_cast<const MyGame::Example2::Monster *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyAnyVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyAny(
        verifier,  values->Get(i), types->GetEnum<Any>(i))) {
      return false;
    }
  }
  return true;
}

}  // mod Example

inline flatbuffers::TypeTable *InParentNamespaceTypeTable();

mod Example2 {

inline flatbuffers::TypeTable *MonsterTypeTable();

}  // mod Example2

mod Example {

inline flatbuffers::TypeTable *TestTypeTable();

inline flatbuffers::TypeTable *TestSimpleTableWithEnumTypeTable();

inline flatbuffers::TypeTable *Vec3TypeTable();

inline flatbuffers::TypeTable *AbilityTypeTable();

inline flatbuffers::TypeTable *StatTypeTable();

inline flatbuffers::TypeTable *MonsterTypeTable();

inline flatbuffers::TypeTable *TypeAliasesTypeTable();

inline flatbuffers::TypeTable *ColorTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const int32_t values[] = { 1, 2, 8 };
  static const char *names[] = {
    "Red",
    "Green",
    "Blue"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 3, type_codes, type_refs, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *AnyTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    MonsterTypeTable,
    TestSimpleTableWithEnumTypeTable,
    MyGame::Example2::MonsterTypeTable
  };
  static const char *names[] = {
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // mod Example

inline flatbuffers::TypeTable *InParentNamespaceTypeTable() {
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

mod Example2 {

inline flatbuffers::TypeTable *MonsterTypeTable() {
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

}  // mod Example2

mod Example {

inline flatbuffers::TypeTable *TestTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 }
  };
  static const int32_t values[] = { 0, 2, 4 };
  static const char *names[] = {
    "a",
    "b"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 2, type_codes, nullptr, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *TestSimpleTableWithEnumTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const char *names[] = {
    "color"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *Vec3TypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable,
    TestTypeTable
  };
  static const int32_t values[] = { 0, 4, 8, 16, 24, 26, 32 };
  static const char *names[] = {
    "x",
    "y",
    "z",
    "test1",
    "test2",
    "test3"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 6, type_codes, type_refs, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *AbilityTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const int32_t values[] = { 0, 4, 8 };
  static const char *names[] = {
    "id",
    "distance"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 2, type_codes, nullptr, values, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *StatTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char *names[] = {
    "id",
    "val",
    "count"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *MonsterTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_CHAR, 0, 1 },
    { flatbuffers::ET_UTYPE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 1, 3 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 5 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_BOOL, 1, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 6 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 3 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_DOUBLE, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 7 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    Vec3TypeTable,
    ColorTypeTable,
    AnyTypeTable,
    TestTypeTable,
    MonsterTypeTable,
    StatTypeTable,
    AbilityTypeTable,
    MyGame::InParentNamespaceTypeTable
  };
  static const char *names[] = {
    "pos",
    "mana",
    "hp",
    "name",
    "friendly",
    "inventory",
    "color",
    "test_type",
    "test",
    "test4",
    "testarrayofstring",
    "testarrayoftables",
    "enemy",
    "testnestedflatbuffer",
    "testempty",
    "testbool",
    "testhashs32_fnv1",
    "testhashu32_fnv1",
    "testhashs64_fnv1",
    "testhashu64_fnv1",
    "testhashs32_fnv1a",
    "testhashu32_fnv1a",
    "testhashs64_fnv1a",
    "testhashu64_fnv1a",
    "testarrayofbools",
    "testf",
    "testf2",
    "testf3",
    "testarrayofstring2",
    "testarrayofsortedstruct",
    "flex",
    "test5",
    "vector_of_longs",
    "vector_of_doubles",
    "parent_namespace_test"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 35, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

inline flatbuffers::TypeTable *TypeAliasesTypeTable() {
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 1, -1 },
    { flatbuffers::ET_DOUBLE, 1, -1 }
  };
  static const char *names[] = {
    "i8",
    "u8",
    "i16",
    "u16",
    "i32",
    "u32",
    "i64",
    "u64",
    "f32",
    "f64",
    "v8",
    "vf64"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 12, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const MyGame::Example::Monster *GetMonster(const void *buf) {
  return flatbuffers::GetRoot<MyGame::Example::Monster>(buf);
}

inline Monster *GetMutableMonster(void *buf) {
  return flatbuffers::GetMutableRoot<Monster>(buf);
}

inline const char *MonsterIdentifier() {
  return "MONS";
}

inline bool MonsterBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MonsterIdentifier());
}

inline bool VerifyMonsterBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MyGame::Example::Monster>(MonsterIdentifier());
}

inline const char *MonsterExtension() {
  return "mon";
}

inline void FinishMonsterBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MyGame::Example::Monster> root) {
  fbb.Finish(root, MonsterIdentifier());
}

}  // mod Example
}  // mod MyGame

