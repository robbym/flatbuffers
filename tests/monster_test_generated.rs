// automatically generated by the FlatBuffers compiler, do not modify



pub mod MyGame {
  extern crate flatbuffers;
  use self::flatbuffers::flexbuffers;

struct InParentNamespace {}
impl flatbuffers::Table for InParentNamespace {}
impl InParentNamespace /* private flatbuffers::Table */ {
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           verifier.EndTable();
  }
}

struct InParentNamespaceBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl InParentNamespaceBuilder {
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> InParentNamespaceBuilder {
    InParentNamespaceBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // InParentNamespaceBuilder &operator=(const InParentNamespaceBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<InParentNamespace> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<InParentNamespace>;
    o
  }
}

#[inline]
fn CreateInParentNamespace(
    _fbb: &mut flatbuffers::FlatBufferBuilder) -> flatbuffers::Offset<InParentNamespace> {
  let mut builder = InParentNamespaceBuilder::new(_fbb);
  builder.Finish()
}

#[inline]
fn InParentNamespaceTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
  */
}

pub mod Example2 {
  extern crate flatbuffers;
  use self::flatbuffers::flexbuffers;

struct Monster {}
impl flatbuffers::Table for Monster {}
impl Monster /* private flatbuffers::Table */ {
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           verifier.EndTable();
  }
}

struct MonsterBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl MonsterBuilder {
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder {
    MonsterBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Monster> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Monster>;
    o
  }
}

#[inline]
fn CreateMonster(
    _fbb: &mut flatbuffers::FlatBufferBuilder) -> flatbuffers::Offset<Monster> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder.Finish()
}

#[inline]
fn MonsterTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
  */
}

}  // pub mod Example2

pub mod Example {
  extern crate flatbuffers;
  use self::flatbuffers::flexbuffers;

enum Color {
  Red = 1,
  Green = 2,
  Blue = 8
}

const EnumValuesColor:[Color; 3] = [
  Color::Red,
  Color::Green,
  Color::Blue
];

const EnumNamesColor:[&'static str; 8] = [
    "Red",
    "Green",
    "",
    "",
    "",
    "",
    "",
    "Blue"
];

fn EnumNameColor(e: Color) -> &'static str {
  let index: usize = e as usize - Color::Red as usize;
  EnumNamesColor[index]
}

enum Any {
  NONE = 0,
  Monster = 1,
  TestSimpleTableWithEnum = 2,
  MyGame_Example2_Monster = 3
}

const EnumValuesAny:[Any; 4] = [
  Any::NONE,
  Any::Monster,
  Any::TestSimpleTableWithEnum,
  Any::MyGame_Example2_Monster
];

const EnumNamesAny:[&'static str; 4] = [
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster"
];

fn EnumNameAny(e: Any) -> &'static str {
  let index: usize = e as usize;
  EnumNamesAny[index]
}

// MANUALLY_ALIGNED_STRUCT(2)
#[repr(C, packed)]
pub struct Test {
  a_: i16,
  b_: i8,
  padding0__: u8,
} // pub struct Test

impl Test {
  fn Reset(&mut self) {
    //memset(this, 0, size_of(Test));
  }
  fn init(&mut self, _a: i16, _b: i8) {
      self.a_ = flatbuffers::endian_scalar(_a);
      self.b_ = flatbuffers::endian_scalar(_b);

  }
  fn a(&self) -> i16  {
    flatbuffers::endian_scalar(self.a_)
  }
  fn mutate_a(&mut self, _a: i16) {
    flatbuffers::write_scalar(&self.a_, _a);
  }
  fn b(&self) -> i8  {
    flatbuffers::endian_scalar(self.b_)
  }
  fn mutate_b(&mut self, _b: i8) {
    flatbuffers::write_scalar(&self.b_, _b);
  }
}
// STRUCT_END(Test, 4);

// MANUALLY_ALIGNED_STRUCT(16)
#[repr(C, packed)]
pub struct Vec3 {
  x_: f32,
  y_: f32,
  z_: f32,
  padding0__: u32,
  test1_: f64,
  test2_: i8,
  padding1__: u8,
  test3_: Test,
  padding2__: u16,
} // pub struct Vec3

impl Vec3 {
  fn Reset(&mut self) {
    //memset(this, 0, size_of(Vec3));
  }
  fn init(&mut self, _x: f32, _y: f32, _z: f32, _test1: f64, _test2: Color, _test3: &Test) {
      self.x_ = flatbuffers::endian_scalar(_x);
      self.y_ = flatbuffers::endian_scalar(_y);
      self.z_ = flatbuffers::endian_scalar(_z);
      self.test1_ = flatbuffers::endian_scalar(_test1);
      self.test2_ = flatbuffers::endian_scalar(_test2 as i8);
      self.test3_ = _test3;

  }
  fn x(&self) -> f32  {
    flatbuffers::endian_scalar(self.x_)
  }
  fn mutate_x(&mut self, _x: f32) {
    flatbuffers::write_scalar(&self.x_, _x);
  }
  fn y(&self) -> f32  {
    flatbuffers::endian_scalar(self.y_)
  }
  fn mutate_y(&mut self, _y: f32) {
    flatbuffers::write_scalar(&self.y_, _y);
  }
  fn z(&self) -> f32  {
    flatbuffers::endian_scalar(self.z_)
  }
  fn mutate_z(&mut self, _z: f32) {
    flatbuffers::write_scalar(&self.z_, _z);
  }
  fn test1(&self) -> f64  {
    flatbuffers::endian_scalar(self.test1_)
  }
  fn mutate_test1(&mut self, _test1: f64) {
    flatbuffers::write_scalar(&self.test1_, _test1);
  }
  fn test2(&self) -> Color  {
    flatbuffers::endian_scalar(self.test2_) as Color
  }
  fn mutate_test2(&mut self, _test2: Color) {
    flatbuffers::write_scalar(&self.test2_, _test2 as i8);
  }
  fn test3(&self) -> &Test {
    self.test3_
  }
  fn mutable_test3(&mut self) -> &mut Test {
    self.test3_
  }
}
// STRUCT_END(Vec3, 32);

// MANUALLY_ALIGNED_STRUCT(4)
#[repr(C, packed)]
pub struct Ability {
  id_: u32,
  distance_: u32,
} // pub struct Ability

impl Ability {
  fn Reset(&mut self) {
    //memset(this, 0, size_of(Ability));
  }
  fn init(&mut self, _id: u32, _distance: u32) {
      self.id_ = flatbuffers::endian_scalar(_id);
      self.distance_ = flatbuffers::endian_scalar(_distance);

  }
  fn id(&self) -> u32  {
    flatbuffers::endian_scalar(self.id_)
  }
  fn mutate_id(&mut self, _id: u32) {
    flatbuffers::write_scalar(&self.id_, _id);
  }
  fn KeyCompareLessThan(&self, o: &Ability) -> bool {
    self.id() < o.id()
  }
  fn KeyCompareWithValue(&self, val: u32) -> isize {
    let key = self.id();
    (key > val) - (key < val)
  }
  fn distance(&self) -> u32  {
    flatbuffers::endian_scalar(self.distance_)
  }
  fn mutate_distance(&mut self, _distance: u32) {
    flatbuffers::write_scalar(&self.distance_, _distance);
  }
}
// STRUCT_END(Ability, 8);

struct TestSimpleTableWithEnum {}
impl flatbuffers::Table for TestSimpleTableWithEnum {}
impl TestSimpleTableWithEnum /* private flatbuffers::Table */ {
    const VT_COLOR: isize = 4;

  fn color(&self) -> Color  {
    // yo
    self.GetField::<i8>(self.VT_COLOR, 2) as Color
  }
  fn mutate_color(&mut self, color_: Color) -> bool {
    flatbuffers::set_field::<i8>(self.VT_COLOR, color_ as i8, 2)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           VerifyField::<i8>(verifier, VT_COLOR) &&
           verifier.EndTable();
  }
}

struct TestSimpleTableWithEnumBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl TestSimpleTableWithEnumBuilder {
  fn add_color(color: Color ) {
    fbb_.AddElement::<i8>(TestSimpleTableWithEnum::VT_COLOR, color as i8, 2);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> TestSimpleTableWithEnumBuilder {
    TestSimpleTableWithEnumBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // TestSimpleTableWithEnumBuilder &operator=(const TestSimpleTableWithEnumBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<TestSimpleTableWithEnum> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<TestSimpleTableWithEnum>;
    o
  }
}

#[inline]
fn CreateTestSimpleTableWithEnum(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    color: Color  /* = Color::Green */) -> flatbuffers::Offset<TestSimpleTableWithEnum> {
  let mut builder = TestSimpleTableWithEnumBuilder::new(_fbb);
  builder.add_color(color);
  builder.Finish()
}

struct Stat {}
impl flatbuffers::Table for Stat {}
impl Stat /* private flatbuffers::Table */ {
    const VT_ID: isize = 4;
    const VT_VAL: isize = 6;
    const VT_COUNT: isize = 8;

  fn id(&self) -> &flatbuffers::String  {
    // yo
    self.GetPointer::<&flatbuffers::String>(self.VT_ID)
  }
  fn mutable_id(&mut self) -> &mut flatbuffers::String  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::String >(self.VT_ID)
  }
  fn val(&self) -> i64  {
    // yo
    self.GetField::<i64>(self.VT_VAL, 0)
  }
  fn mutate_val(&mut self, val_: i64) -> bool {
    flatbuffers::set_field::<i64>(self.VT_VAL, val_, 0)
  }
  fn count(&self) -> u16  {
    // yo
    self.GetField::<u16>(self.VT_COUNT, 0)
  }
  fn mutate_count(&mut self, count_: u16) -> bool {
    flatbuffers::set_field::<u16>(self.VT_COUNT, count_, 0)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.Verify(id()) &&
           VerifyField::<i64>(verifier, VT_VAL) &&
           VerifyField::<u16>(verifier, VT_COUNT) &&
           verifier.EndTable();
  }
}

struct StatBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl StatBuilder {
  fn add_id(id: flatbuffers::Offset<flatbuffers::String> ) {
    fbb_.AddOffset(Stat::VT_ID, id);
  }
  fn add_val(val: i64 ) {
    fbb_.AddElement::<i64>(Stat::VT_VAL, val, 0);
  }
  fn add_count(count: u16 ) {
    fbb_.AddElement::<u16>(Stat::VT_COUNT, count, 0);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> StatBuilder {
    StatBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // StatBuilder &operator=(const StatBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Stat> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Stat>;
    o
  }
}

#[inline]
fn CreateStat(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    id: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */) -> flatbuffers::Offset<Stat> {
  let mut builder = StatBuilder::new(_fbb);
  builder.add_val(val);
  builder.add_id(id);
  builder.add_count(count);
  builder.Finish()
}

#[inline]
fn CreateStatDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    id: const_char_string_ptr /* = nullptr */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */) -> flatbuffers::Offset<Stat> {
  return CreateStat(
      _fbb,
      if id { _fbb.CreateString(id) } else { 0 },
      val,
      count);
}

/// an example documentation comment: monster object
struct Monster {}
impl flatbuffers::Table for Monster {}
impl Monster /* private flatbuffers::Table */ {
    const VT_POS: isize = 4;
    const VT_MANA: isize = 6;
    const VT_HP: isize = 8;
    const VT_NAME: isize = 10;
    const VT_INVENTORY: isize = 14;
    const VT_COLOR: isize = 16;
    const VT_TEST_TYPE: isize = 18;
    const VT_TEST: isize = 20;
    const VT_TEST4: isize = 22;
    const VT_TESTARRAYOFSTRING: isize = 24;
    const VT_TESTARRAYOFTABLES: isize = 26;
    const VT_ENEMY: isize = 28;
    const VT_TESTNESTEDFLATBUFFER: isize = 30;
    const VT_TESTEMPTY: isize = 32;
    const VT_TESTBOOL: isize = 34;
    const VT_TESTHASHS32_FNV1: isize = 36;
    const VT_TESTHASHU32_FNV1: isize = 38;
    const VT_TESTHASHS64_FNV1: isize = 40;
    const VT_TESTHASHU64_FNV1: isize = 42;
    const VT_TESTHASHS32_FNV1A: isize = 44;
    const VT_TESTHASHU32_FNV1A: isize = 46;
    const VT_TESTHASHS64_FNV1A: isize = 48;
    const VT_TESTHASHU64_FNV1A: isize = 50;
    const VT_TESTARRAYOFBOOLS: isize = 52;
    const VT_TESTF: isize = 54;
    const VT_TESTF2: isize = 56;
    const VT_TESTF3: isize = 58;
    const VT_TESTARRAYOFSTRING2: isize = 60;
    const VT_TESTARRAYOFSORTEDSTRUCT: isize = 62;
    const VT_FLEX: isize = 64;
    const VT_TEST5: isize = 66;
    const VT_VECTOR_OF_LONGS: isize = 68;
    const VT_VECTOR_OF_DOUBLES: isize = 70;
    const VT_PARENT_NAMESPACE_TEST: isize = 72;

  fn pos(&self) -> &Vec3  {
    // yo
    self.GetStruct::<&Vec3>(self.VT_POS)
  }
  fn mutable_pos(&mut self) -> &mut Vec3  {
    /* TODO: are there non-reference choices here? */
    &mut GetStruct::<&mut Vec3 >(self.VT_POS)
  }
  fn mana(&self) -> i16  {
    // yo
    self.GetField::<i16>(self.VT_MANA, 150)
  }
  fn mutate_mana(&mut self, mana_: i16) -> bool {
    flatbuffers::set_field::<i16>(self.VT_MANA, mana_, 150)
  }
  fn hp(&self) -> i16  {
    // yo
    self.GetField::<i16>(self.VT_HP, 100)
  }
  fn mutate_hp(&mut self, hp_: i16) -> bool {
    flatbuffers::set_field::<i16>(self.VT_HP, hp_, 100)
  }
  fn name(&self) -> &flatbuffers::String  {
    // yo
    self.GetPointer::<&flatbuffers::String>(self.VT_NAME)
  }
  fn mutable_name(&mut self) -> &mut flatbuffers::String  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::String >(self.VT_NAME)
  }
  fn KeyCompareLessThan(&self, o: &Monster) -> bool {
    return *self.name() < *o.name();
  }
  fn KeyCompareWithValue(&self, val: &const_char) -> isize {
    return strcmp(self.name().c_str(), val);
  }
  fn inventory(&self) -> &flatbuffers::Vector<u8>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<u8>>(self.VT_INVENTORY)
  }
  fn mutable_inventory(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(self.VT_INVENTORY)
  }
  fn color(&self) -> Color  {
    // yo
    self.GetField::<i8>(self.VT_COLOR, 8) as Color
  }
  fn mutate_color(&mut self, color_: Color) -> bool {
    flatbuffers::set_field::<i8>(self.VT_COLOR, color_ as i8, 8)
  }
  fn test_type(&self) -> Any  {
    // yo
    self.GetField::<u8>(self.VT_TEST_TYPE, 0) as Any
  }
  fn mutate_test_type(&mut self, test_type_: Any) -> bool {
    flatbuffers::set_field::<u8>(self.VT_TEST_TYPE, test_type_ as u8, 0)
  }
  fn test(&self) -> &void  {
    // yo
    self.GetPointer::<&void>(self.VT_TEST)
  }
  // TODO(?) template<typename T> const T *test_as() const;
  // TODO: fn test_as_Monster() -> &Monster {
// TODO:     if test_type() == Any::Monster { static_cast::<&Monster>(test()) } else { nullptr }
// TODO:   }
  // TODO: fn test_as_TestSimpleTableWithEnum() -> &TestSimpleTableWithEnum {
// TODO:     if test_type() == Any::TestSimpleTableWithEnum { static_cast::<&TestSimpleTableWithEnum>(test()) } else { nullptr }
// TODO:   }
  // TODO: fn test_as_MyGame_Example2_Monster() -> &super::Example2::Monster {
// TODO:     if test_type() == Any::MyGame_Example2_Monster { static_cast::<&super::Example2::Monster>(test()) } else { nullptr }
// TODO:   }
  fn mutable_test(&mut self) -> &mut void  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut void >(self.VT_TEST)
  }
  fn test4(&self) -> &flatbuffers::Vector<&Test>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<&Test>>(self.VT_TEST4)
  }
  fn mutable_test4(&mut self) -> &mut flatbuffers::Vector<&Test>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Test> >(self.VT_TEST4)
  }
  fn testarrayofstring(&self) -> &flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>(self.VT_TESTARRAYOFSTRING)
  }
  fn mutable_testarrayofstring(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> >(self.VT_TESTARRAYOFSTRING)
  }
  /// an example documentation comment: this will end up in the generated code
  /// multiline too
  fn testarrayoftables(&self) -> &flatbuffers::Vector<flatbuffers::Offset<Monster>>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<Monster>>>(self.VT_TESTARRAYOFTABLES)
  }
  fn mutable_testarrayoftables(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<Monster>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<Monster>> >(self.VT_TESTARRAYOFTABLES)
  }
  fn enemy(&self) -> &Monster  {
    // yo
    self.GetPointer::<&Monster>(self.VT_ENEMY)
  }
  fn mutable_enemy(&mut self) -> &mut Monster  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut Monster >(self.VT_ENEMY)
  }
  fn testnestedflatbuffer(&self) -> &flatbuffers::Vector<u8>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<u8>>(self.VT_TESTNESTEDFLATBUFFER)
  }
  fn mutable_testnestedflatbuffer(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(self.VT_TESTNESTEDFLATBUFFER)
  }
  fn testnestedflatbuffer_nested_root() -> &Monster{
    return flatbuffers::GetRoot::<Monster>(testnestedflatbuffer().Data());
  }
  fn testempty(&self) -> &Stat  {
    // yo
    self.GetPointer::<&Stat>(self.VT_TESTEMPTY)
  }
  fn mutable_testempty(&mut self) -> &mut Stat  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut Stat >(self.VT_TESTEMPTY)
  }
  fn testbool(&self) -> bool  {
    // yo
    self.GetField::<bool>(self.VT_TESTBOOL, 0) != 0
  }
  fn mutate_testbool(&mut self, testbool_: bool) -> bool {
    flatbuffers::set_field::<bool>(self.VT_TESTBOOL, testbool_ as bool, 0)
  }
  fn testhashs32_fnv1(&self) -> i32  {
    // yo
    self.GetField::<i32>(self.VT_TESTHASHS32_FNV1, 0)
  }
  fn mutate_testhashs32_fnv1(&mut self, testhashs32_fnv1_: i32) -> bool {
    flatbuffers::set_field::<i32>(self.VT_TESTHASHS32_FNV1, testhashs32_fnv1_, 0)
  }
  fn testhashu32_fnv1(&self) -> u32  {
    // yo
    self.GetField::<u32>(self.VT_TESTHASHU32_FNV1, 0)
  }
  fn mutate_testhashu32_fnv1(&mut self, testhashu32_fnv1_: u32) -> bool {
    flatbuffers::set_field::<u32>(self.VT_TESTHASHU32_FNV1, testhashu32_fnv1_, 0)
  }
  fn testhashs64_fnv1(&self) -> i64  {
    // yo
    self.GetField::<i64>(self.VT_TESTHASHS64_FNV1, 0)
  }
  fn mutate_testhashs64_fnv1(&mut self, testhashs64_fnv1_: i64) -> bool {
    flatbuffers::set_field::<i64>(self.VT_TESTHASHS64_FNV1, testhashs64_fnv1_, 0)
  }
  fn testhashu64_fnv1(&self) -> u64  {
    // yo
    self.GetField::<u64>(self.VT_TESTHASHU64_FNV1, 0)
  }
  fn mutate_testhashu64_fnv1(&mut self, testhashu64_fnv1_: u64) -> bool {
    flatbuffers::set_field::<u64>(self.VT_TESTHASHU64_FNV1, testhashu64_fnv1_, 0)
  }
  fn testhashs32_fnv1a(&self) -> i32  {
    // yo
    self.GetField::<i32>(self.VT_TESTHASHS32_FNV1A, 0)
  }
  fn mutate_testhashs32_fnv1a(&mut self, testhashs32_fnv1a_: i32) -> bool {
    flatbuffers::set_field::<i32>(self.VT_TESTHASHS32_FNV1A, testhashs32_fnv1a_, 0)
  }
  fn testhashu32_fnv1a(&self) -> u32  {
    // yo
    self.GetField::<u32>(self.VT_TESTHASHU32_FNV1A, 0)
  }
  fn mutate_testhashu32_fnv1a(&mut self, testhashu32_fnv1a_: u32) -> bool {
    flatbuffers::set_field::<u32>(self.VT_TESTHASHU32_FNV1A, testhashu32_fnv1a_, 0)
  }
  fn testhashs64_fnv1a(&self) -> i64  {
    // yo
    self.GetField::<i64>(self.VT_TESTHASHS64_FNV1A, 0)
  }
  fn mutate_testhashs64_fnv1a(&mut self, testhashs64_fnv1a_: i64) -> bool {
    flatbuffers::set_field::<i64>(self.VT_TESTHASHS64_FNV1A, testhashs64_fnv1a_, 0)
  }
  fn testhashu64_fnv1a(&self) -> u64  {
    // yo
    self.GetField::<u64>(self.VT_TESTHASHU64_FNV1A, 0)
  }
  fn mutate_testhashu64_fnv1a(&mut self, testhashu64_fnv1a_: u64) -> bool {
    flatbuffers::set_field::<u64>(self.VT_TESTHASHU64_FNV1A, testhashu64_fnv1a_, 0)
  }
  fn testarrayofbools(&self) -> &flatbuffers::Vector<bool>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<bool>>(self.VT_TESTARRAYOFBOOLS)
  }
  fn mutable_testarrayofbools(&mut self) -> &mut flatbuffers::Vector<bool>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<bool> >(self.VT_TESTARRAYOFBOOLS)
  }
  fn testf(&self) -> f32  {
    // yo
    self.GetField::<f32>(self.VT_TESTF, 3.14159)
  }
  fn mutate_testf(&mut self, testf_: f32) -> bool {
    flatbuffers::set_field::<f32>(self.VT_TESTF, testf_, 3.14159)
  }
  fn testf2(&self) -> f32  {
    // yo
    self.GetField::<f32>(self.VT_TESTF2, 3.0)
  }
  fn mutate_testf2(&mut self, testf2_: f32) -> bool {
    flatbuffers::set_field::<f32>(self.VT_TESTF2, testf2_, 3.0)
  }
  fn testf3(&self) -> f32  {
    // yo
    self.GetField::<f32>(self.VT_TESTF3, 0.0)
  }
  fn mutate_testf3(&mut self, testf3_: f32) -> bool {
    flatbuffers::set_field::<f32>(self.VT_TESTF3, testf3_, 0.0)
  }
  fn testarrayofstring2(&self) -> &flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>(self.VT_TESTARRAYOFSTRING2)
  }
  fn mutable_testarrayofstring2(&mut self) -> &mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> >(self.VT_TESTARRAYOFSTRING2)
  }
  fn testarrayofsortedstruct(&self) -> &flatbuffers::Vector<&Ability>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<&Ability>>(self.VT_TESTARRAYOFSORTEDSTRUCT)
  }
  fn mutable_testarrayofsortedstruct(&mut self) -> &mut flatbuffers::Vector<&Ability>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Ability> >(self.VT_TESTARRAYOFSORTEDSTRUCT)
  }
  fn flex(&self) -> &flatbuffers::Vector<u8>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<u8>>(self.VT_FLEX)
  }
  fn mutable_flex(&mut self) -> &mut flatbuffers::Vector<u8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<u8> >(self.VT_FLEX)
  }
  fn flex_flexbuffer_root() -> flexbuffers::Reference {
    let v = flex();
    return flexbuffers::GetRoot(v.Data(), v.size());
  }
  fn test5(&self) -> &flatbuffers::Vector<&Test>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<&Test>>(self.VT_TEST5)
  }
  fn mutable_test5(&mut self) -> &mut flatbuffers::Vector<&Test>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<&Test> >(self.VT_TEST5)
  }
  fn vector_of_longs(&self) -> &flatbuffers::Vector<i64>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<i64>>(self.VT_VECTOR_OF_LONGS)
  }
  fn mutable_vector_of_longs(&mut self) -> &mut flatbuffers::Vector<i64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<i64> >(self.VT_VECTOR_OF_LONGS)
  }
  fn vector_of_doubles(&self) -> &flatbuffers::Vector<f64>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<f64>>(self.VT_VECTOR_OF_DOUBLES)
  }
  fn mutable_vector_of_doubles(&mut self) -> &mut flatbuffers::Vector<f64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<f64> >(self.VT_VECTOR_OF_DOUBLES)
  }
  fn parent_namespace_test(&self) -> &super::InParentNamespace  {
    // yo
    self.GetPointer::<&super::InParentNamespace>(self.VT_PARENT_NAMESPACE_TEST)
  }
  fn mutable_parent_namespace_test(&mut self) -> &mut super::InParentNamespace  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut super::InParentNamespace >(self.VT_PARENT_NAMESPACE_TEST)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           VerifyField::<Vec3>(verifier, VT_POS) &&
           VerifyField::<i16>(verifier, VT_MANA) &&
           VerifyField::<i16>(verifier, VT_HP) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_INVENTORY) &&
           verifier.Verify(inventory()) &&
           VerifyField::<i8>(verifier, VT_COLOR) &&
           VerifyField::<u8>(verifier, VT_TEST_TYPE) &&
           VerifyOffset(verifier, VT_TEST) &&
           VerifyAny(verifier, test(), test_type()) &&
           VerifyOffset(verifier, VT_TEST4) &&
           verifier.Verify(test4()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING) &&
           verifier.Verify(testarrayofstring()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFTABLES) &&
           verifier.Verify(testarrayoftables()) &&
           verifier.VerifyVectorOfTables(testarrayoftables()) &&
           VerifyOffset(verifier, VT_ENEMY) &&
           verifier.VerifyTable(enemy()) &&
           VerifyOffset(verifier, VT_TESTNESTEDFLATBUFFER) &&
           verifier.Verify(testnestedflatbuffer()) &&
           VerifyOffset(verifier, VT_TESTEMPTY) &&
           verifier.VerifyTable(testempty()) &&
           VerifyField::<bool>(verifier, VT_TESTBOOL) &&
           VerifyField::<i32>(verifier, VT_TESTHASHS32_FNV1) &&
           VerifyField::<u32>(verifier, VT_TESTHASHU32_FNV1) &&
           VerifyField::<i64>(verifier, VT_TESTHASHS64_FNV1) &&
           VerifyField::<u64>(verifier, VT_TESTHASHU64_FNV1) &&
           VerifyField::<i32>(verifier, VT_TESTHASHS32_FNV1A) &&
           VerifyField::<u32>(verifier, VT_TESTHASHU32_FNV1A) &&
           VerifyField::<i64>(verifier, VT_TESTHASHS64_FNV1A) &&
           VerifyField::<u64>(verifier, VT_TESTHASHU64_FNV1A) &&
           VerifyOffset(verifier, VT_TESTARRAYOFBOOLS) &&
           verifier.Verify(testarrayofbools()) &&
           VerifyField::<f32>(verifier, VT_TESTF) &&
           VerifyField::<f32>(verifier, VT_TESTF2) &&
           VerifyField::<f32>(verifier, VT_TESTF3) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSTRING2) &&
           verifier.Verify(testarrayofstring2()) &&
           verifier.VerifyVectorOfStrings(testarrayofstring2()) &&
           VerifyOffset(verifier, VT_TESTARRAYOFSORTEDSTRUCT) &&
           verifier.Verify(testarrayofsortedstruct()) &&
           VerifyOffset(verifier, VT_FLEX) &&
           verifier.Verify(flex()) &&
           VerifyOffset(verifier, VT_TEST5) &&
           verifier.Verify(test5()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_LONGS) &&
           verifier.Verify(vector_of_longs()) &&
           VerifyOffset(verifier, VT_VECTOR_OF_DOUBLES) &&
           verifier.Verify(vector_of_doubles()) &&
           VerifyOffset(verifier, VT_PARENT_NAMESPACE_TEST) &&
           verifier.VerifyTable(parent_namespace_test()) &&
           verifier.EndTable();
  }
}

//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_Monster_X() -> &Monster {
//  return test_as_Monster();
//}
//
//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_TestSimpleTableWithEnum_X() -> &TestSimpleTableWithEnum {
//  return test_as_TestSimpleTableWithEnum();
//}
//
//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_super::Example2::Monster_X() -> &super::Example2::Monster {
//  return test_as_MyGame_Example2_Monster();
//}
//
struct MonsterBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl MonsterBuilder {
  fn add_pos(pos: &Vec3) {
    fbb_.AddStruct(Monster::VT_POS, pos);
  }
  fn add_mana(mana: i16 ) {
    fbb_.AddElement::<i16>(Monster::VT_MANA, mana, 150);
  }
  fn add_hp(hp: i16 ) {
    fbb_.AddElement::<i16>(Monster::VT_HP, hp, 100);
  }
  fn add_name(name: flatbuffers::Offset<flatbuffers::String> ) {
    fbb_.AddOffset(Monster::VT_NAME, name);
  }
  fn add_inventory(inventory: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_INVENTORY, inventory);
  }
  fn add_color(color: Color ) {
    fbb_.AddElement::<i8>(Monster::VT_COLOR, color as i8, 8);
  }
  fn add_test_type(test_type: Any ) {
    fbb_.AddElement::<u8>(Monster::VT_TEST_TYPE, test_type as u8, 0);
  }
  fn add_test(test: flatbuffers::Offset<void> ) {
    fbb_.AddOffset(Monster::VT_TEST, test);
  }
  fn add_test4(test4: flatbuffers::Offset<flatbuffers::Vector<&Test>> ) {
    fbb_.AddOffset(Monster::VT_TEST4, test4);
  }
  fn add_testarrayofstring(testarrayofstring: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING, testarrayofstring);
  }
  fn add_testarrayoftables(testarrayoftables: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFTABLES, testarrayoftables);
  }
  fn add_enemy(enemy: flatbuffers::Offset<Monster> ) {
    fbb_.AddOffset(Monster::VT_ENEMY, enemy);
  }
  fn add_testnestedflatbuffer(testnestedflatbuffer: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_TESTNESTEDFLATBUFFER, testnestedflatbuffer);
  }
  fn add_testempty(testempty: flatbuffers::Offset<Stat> ) {
    fbb_.AddOffset(Monster::VT_TESTEMPTY, testempty);
  }
  fn add_testbool(testbool: bool ) {
    fbb_.AddElement::<bool>(Monster::VT_TESTBOOL, testbool as bool, 0);
  }
  fn add_testhashs32_fnv1(testhashs32_fnv1: i32 ) {
    fbb_.AddElement::<i32>(Monster::VT_TESTHASHS32_FNV1, testhashs32_fnv1, 0);
  }
  fn add_testhashu32_fnv1(testhashu32_fnv1: u32 ) {
    fbb_.AddElement::<u32>(Monster::VT_TESTHASHU32_FNV1, testhashu32_fnv1, 0);
  }
  fn add_testhashs64_fnv1(testhashs64_fnv1: i64 ) {
    fbb_.AddElement::<i64>(Monster::VT_TESTHASHS64_FNV1, testhashs64_fnv1, 0);
  }
  fn add_testhashu64_fnv1(testhashu64_fnv1: u64 ) {
    fbb_.AddElement::<u64>(Monster::VT_TESTHASHU64_FNV1, testhashu64_fnv1, 0);
  }
  fn add_testhashs32_fnv1a(testhashs32_fnv1a: i32 ) {
    fbb_.AddElement::<i32>(Monster::VT_TESTHASHS32_FNV1A, testhashs32_fnv1a, 0);
  }
  fn add_testhashu32_fnv1a(testhashu32_fnv1a: u32 ) {
    fbb_.AddElement::<u32>(Monster::VT_TESTHASHU32_FNV1A, testhashu32_fnv1a, 0);
  }
  fn add_testhashs64_fnv1a(testhashs64_fnv1a: i64 ) {
    fbb_.AddElement::<i64>(Monster::VT_TESTHASHS64_FNV1A, testhashs64_fnv1a, 0);
  }
  fn add_testhashu64_fnv1a(testhashu64_fnv1a: u64 ) {
    fbb_.AddElement::<u64>(Monster::VT_TESTHASHU64_FNV1A, testhashu64_fnv1a, 0);
  }
  fn add_testarrayofbools(testarrayofbools: flatbuffers::Offset<flatbuffers::Vector<bool>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFBOOLS, testarrayofbools);
  }
  fn add_testf(testf: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF, testf, 3.14159);
  }
  fn add_testf2(testf2: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF2, testf2, 3.0);
  }
  fn add_testf3(testf3: f32 ) {
    fbb_.AddElement::<f32>(Monster::VT_TESTF3, testf3, 0.0);
  }
  fn add_testarrayofstring2(testarrayofstring2: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSTRING2, testarrayofstring2);
  }
  fn add_testarrayofsortedstruct(testarrayofsortedstruct: flatbuffers::Offset<flatbuffers::Vector<&Ability>> ) {
    fbb_.AddOffset(Monster::VT_TESTARRAYOFSORTEDSTRUCT, testarrayofsortedstruct);
  }
  fn add_flex(flex: flatbuffers::Offset<flatbuffers::Vector<u8>> ) {
    fbb_.AddOffset(Monster::VT_FLEX, flex);
  }
  fn add_test5(test5: flatbuffers::Offset<flatbuffers::Vector<&Test>> ) {
    fbb_.AddOffset(Monster::VT_TEST5, test5);
  }
  fn add_vector_of_longs(vector_of_longs: flatbuffers::Offset<flatbuffers::Vector<i64>> ) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_LONGS, vector_of_longs);
  }
  fn add_vector_of_doubles(vector_of_doubles: flatbuffers::Offset<flatbuffers::Vector<f64>> ) {
    fbb_.AddOffset(Monster::VT_VECTOR_OF_DOUBLES, vector_of_doubles);
  }
  fn add_parent_namespace_test(parent_namespace_test: flatbuffers::Offset<super::InParentNamespace> ) {
    fbb_.AddOffset(Monster::VT_PARENT_NAMESPACE_TEST, parent_namespace_test);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder {
    MonsterBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<Monster> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<Monster>;
    fbb_.Required(o, Monster::VT_NAME);
    o
  }
}

#[inline]
fn CreateMonster(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    pos: &Vec3 /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    inventory: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    color: Color  /* = Color::Blue */,
    test_type: Any  /* = Any::NONE */,
    test: flatbuffers::Offset<void>  /* = 0 */,
    test4: flatbuffers::Offset<flatbuffers::Vector<&Test>>  /* = 0 */,
    testarrayofstring: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>  /* = 0 */,
    testarrayoftables: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Monster>>>  /* = 0 */,
    enemy: flatbuffers::Offset<Monster>  /* = 0 */,
    testnestedflatbuffer: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    testempty: flatbuffers::Offset<Stat>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: flatbuffers::Offset<flatbuffers::Vector<bool>>  /* = 0 */,
    testf: f32  /* = 3.14159 */,
    testf2: f32  /* = 3.0 */,
    testf3: f32  /* = 0.0 */,
    testarrayofstring2: flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>>  /* = 0 */,
    testarrayofsortedstruct: flatbuffers::Offset<flatbuffers::Vector<&Ability>>  /* = 0 */,
    flex: flatbuffers::Offset<flatbuffers::Vector<u8>>  /* = 0 */,
    test5: flatbuffers::Offset<flatbuffers::Vector<&Test>>  /* = 0 */,
    vector_of_longs: flatbuffers::Offset<flatbuffers::Vector<i64>>  /* = 0 */,
    vector_of_doubles: flatbuffers::Offset<flatbuffers::Vector<f64>>  /* = 0 */,
    parent_namespace_test: flatbuffers::Offset<super::InParentNamespace>  /* = 0 */) -> flatbuffers::Offset<Monster> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder.add_testhashu64_fnv1a(testhashu64_fnv1a);
  builder.add_testhashs64_fnv1a(testhashs64_fnv1a);
  builder.add_testhashu64_fnv1(testhashu64_fnv1);
  builder.add_testhashs64_fnv1(testhashs64_fnv1);
  builder.add_parent_namespace_test(parent_namespace_test);
  builder.add_vector_of_doubles(vector_of_doubles);
  builder.add_vector_of_longs(vector_of_longs);
  builder.add_test5(test5);
  builder.add_flex(flex);
  builder.add_testarrayofsortedstruct(testarrayofsortedstruct);
  builder.add_testarrayofstring2(testarrayofstring2);
  builder.add_testf3(testf3);
  builder.add_testf2(testf2);
  builder.add_testf(testf);
  builder.add_testarrayofbools(testarrayofbools);
  builder.add_testhashu32_fnv1a(testhashu32_fnv1a);
  builder.add_testhashs32_fnv1a(testhashs32_fnv1a);
  builder.add_testhashu32_fnv1(testhashu32_fnv1);
  builder.add_testhashs32_fnv1(testhashs32_fnv1);
  builder.add_testempty(testempty);
  builder.add_testnestedflatbuffer(testnestedflatbuffer);
  builder.add_enemy(enemy);
  builder.add_testarrayoftables(testarrayoftables);
  builder.add_testarrayofstring(testarrayofstring);
  builder.add_test4(test4);
  builder.add_test(test);
  builder.add_inventory(inventory);
  builder.add_name(name);
  builder.add_pos(pos);
  builder.add_hp(hp);
  builder.add_mana(mana);
  builder.add_testbool(testbool);
  builder.add_test_type(test_type);
  builder.add_color(color);
  builder.Finish()
}

#[inline]
fn CreateMonsterDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    pos: &Vec3 /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: const_char_string_ptr /* = nullptr */,
    inventory: Option<Vector<u8>> /* = nullptr */,
    color: Color  /* = Color::Blue */,
    test_type: Any  /* = Any::NONE */,
    test: flatbuffers::Offset<void>  /* = 0 */,
    test4: Option<Vector<Test>> /* = nullptr */,
    testarrayofstring: Option<Vector<flatbuffers::Offset<flatbuffers::String>>> /* = nullptr */,
    testarrayoftables: Option<Vector<flatbuffers::Offset<Monster>>> /* = nullptr */,
    enemy: flatbuffers::Offset<Monster>  /* = 0 */,
    testnestedflatbuffer: Option<Vector<u8>> /* = nullptr */,
    testempty: flatbuffers::Offset<Stat>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: Option<Vector<bool>> /* = nullptr */,
    testf: f32  /* = 3.14159 */,
    testf2: f32  /* = 3.0 */,
    testf3: f32  /* = 0.0 */,
    testarrayofstring2: Option<Vector<flatbuffers::Offset<flatbuffers::String>>> /* = nullptr */,
    testarrayofsortedstruct: Option<Vector<Ability>> /* = nullptr */,
    flex: Option<Vector<u8>> /* = nullptr */,
    test5: Option<Vector<Test>> /* = nullptr */,
    vector_of_longs: Option<Vector<i64>> /* = nullptr */,
    vector_of_doubles: Option<Vector<f64>> /* = nullptr */,
    parent_namespace_test: flatbuffers::Offset<super::InParentNamespace>  /* = 0 */) -> flatbuffers::Offset<Monster> {
  return CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      if name { _fbb.CreateString(name) } else { 0 },
      if inventory { _fbb.CreateVector::<u8>(*inventory) } else { 0 },
      color,
      test_type,
      test,
      if test4 { _fbb.CreateVectorOfStructs::<Test>(*test4) } else { 0 },
      if testarrayofstring { _fbb.CreateVector::<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring) } else { 0 },
      if testarrayoftables { _fbb.CreateVector::<flatbuffers::Offset<Monster>>(*testarrayoftables) } else { 0 },
      enemy,
      if testnestedflatbuffer { _fbb.CreateVector::<u8>(*testnestedflatbuffer) } else { 0 },
      testempty,
      testbool,
      testhashs32_fnv1,
      testhashu32_fnv1,
      testhashs64_fnv1,
      testhashu64_fnv1,
      testhashs32_fnv1a,
      testhashu32_fnv1a,
      testhashs64_fnv1a,
      testhashu64_fnv1a,
      if testarrayofbools { _fbb.CreateVector::<bool>(*testarrayofbools) } else { 0 },
      testf,
      testf2,
      testf3,
      if testarrayofstring2 { _fbb.CreateVector::<flatbuffers::Offset<flatbuffers::String>>(*testarrayofstring2) } else { 0 },
      if testarrayofsortedstruct { _fbb.CreateVectorOfStructs::<Ability>(*testarrayofsortedstruct) } else { 0 },
      if flex { _fbb.CreateVector::<u8>(*flex) } else { 0 },
      if test5 { _fbb.CreateVectorOfStructs::<Test>(*test5) } else { 0 },
      if vector_of_longs { _fbb.CreateVector::<i64>(*vector_of_longs) } else { 0 },
      if vector_of_doubles { _fbb.CreateVector::<f64>(*vector_of_doubles) } else { 0 },
      parent_namespace_test);
}

struct TypeAliases {}
impl flatbuffers::Table for TypeAliases {}
impl TypeAliases /* private flatbuffers::Table */ {
    const VT_I8_: isize = 4;
    const VT_U8_: isize = 6;
    const VT_I16_: isize = 8;
    const VT_U16_: isize = 10;
    const VT_I32_: isize = 12;
    const VT_U32_: isize = 14;
    const VT_I64_: isize = 16;
    const VT_U64_: isize = 18;
    const VT_F32_: isize = 20;
    const VT_F64_: isize = 22;
    const VT_V8: isize = 24;
    const VT_VF64: isize = 26;

  fn i8_(&self) -> i8  {
    // yo
    self.GetField::<i8>(self.VT_I8_, 0)
  }
  fn mutate_i8_(&mut self, i8__: i8) -> bool {
    flatbuffers::set_field::<i8>(self.VT_I8_, i8__, 0)
  }
  fn u8_(&self) -> u8  {
    // yo
    self.GetField::<u8>(self.VT_U8_, 0)
  }
  fn mutate_u8_(&mut self, u8__: u8) -> bool {
    flatbuffers::set_field::<u8>(self.VT_U8_, u8__, 0)
  }
  fn i16_(&self) -> i16  {
    // yo
    self.GetField::<i16>(self.VT_I16_, 0)
  }
  fn mutate_i16_(&mut self, i16__: i16) -> bool {
    flatbuffers::set_field::<i16>(self.VT_I16_, i16__, 0)
  }
  fn u16_(&self) -> u16  {
    // yo
    self.GetField::<u16>(self.VT_U16_, 0)
  }
  fn mutate_u16_(&mut self, u16__: u16) -> bool {
    flatbuffers::set_field::<u16>(self.VT_U16_, u16__, 0)
  }
  fn i32_(&self) -> i32  {
    // yo
    self.GetField::<i32>(self.VT_I32_, 0)
  }
  fn mutate_i32_(&mut self, i32__: i32) -> bool {
    flatbuffers::set_field::<i32>(self.VT_I32_, i32__, 0)
  }
  fn u32_(&self) -> u32  {
    // yo
    self.GetField::<u32>(self.VT_U32_, 0)
  }
  fn mutate_u32_(&mut self, u32__: u32) -> bool {
    flatbuffers::set_field::<u32>(self.VT_U32_, u32__, 0)
  }
  fn i64_(&self) -> i64  {
    // yo
    self.GetField::<i64>(self.VT_I64_, 0)
  }
  fn mutate_i64_(&mut self, i64__: i64) -> bool {
    flatbuffers::set_field::<i64>(self.VT_I64_, i64__, 0)
  }
  fn u64_(&self) -> u64  {
    // yo
    self.GetField::<u64>(self.VT_U64_, 0)
  }
  fn mutate_u64_(&mut self, u64__: u64) -> bool {
    flatbuffers::set_field::<u64>(self.VT_U64_, u64__, 0)
  }
  fn f32_(&self) -> f32  {
    // yo
    self.GetField::<f32>(self.VT_F32_, 0.0)
  }
  fn mutate_f32_(&mut self, f32__: f32) -> bool {
    flatbuffers::set_field::<f32>(self.VT_F32_, f32__, 0.0)
  }
  fn f64_(&self) -> f64  {
    // yo
    self.GetField::<f64>(self.VT_F64_, 0.0)
  }
  fn mutate_f64_(&mut self, f64__: f64) -> bool {
    flatbuffers::set_field::<f64>(self.VT_F64_, f64__, 0.0)
  }
  fn v8(&self) -> &flatbuffers::Vector<i8>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<i8>>(self.VT_V8)
  }
  fn mutable_v8(&mut self) -> &mut flatbuffers::Vector<i8>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<i8> >(self.VT_V8)
  }
  fn vf64(&self) -> &flatbuffers::Vector<f64>  {
    // yo
    self.GetPointer::<&flatbuffers::Vector<f64>>(self.VT_VF64)
  }
  fn mutable_vf64(&mut self) -> &mut flatbuffers::Vector<f64>  {
    /* TODO: are there non-reference choices here? */
    &mut GetPointer::<&mut flatbuffers::Vector<f64> >(self.VT_VF64)
  }
  fn Verify(verifier: &flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           VerifyField::<i8>(verifier, VT_I8_) &&
           VerifyField::<u8>(verifier, VT_U8_) &&
           VerifyField::<i16>(verifier, VT_I16_) &&
           VerifyField::<u16>(verifier, VT_U16_) &&
           VerifyField::<i32>(verifier, VT_I32_) &&
           VerifyField::<u32>(verifier, VT_U32_) &&
           VerifyField::<i64>(verifier, VT_I64_) &&
           VerifyField::<u64>(verifier, VT_U64_) &&
           VerifyField::<f32>(verifier, VT_F32_) &&
           VerifyField::<f64>(verifier, VT_F64_) &&
           VerifyOffset(verifier, VT_V8) &&
           verifier.Verify(v8()) &&
           VerifyOffset(verifier, VT_VF64) &&
           verifier.Verify(vf64()) &&
           verifier.EndTable();
  }
}

struct TypeAliasesBuilder {
  fbb_: &flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::uoffset_t,
}
impl TypeAliasesBuilder {
  fn add_i8_(i8_: i8 ) {
    fbb_.AddElement::<i8>(TypeAliases::VT_I8_, i8_, 0);
  }
  fn add_u8_(u8_: u8 ) {
    fbb_.AddElement::<u8>(TypeAliases::VT_U8_, u8_, 0);
  }
  fn add_i16_(i16_: i16 ) {
    fbb_.AddElement::<i16>(TypeAliases::VT_I16_, i16_, 0);
  }
  fn add_u16_(u16_: u16 ) {
    fbb_.AddElement::<u16>(TypeAliases::VT_U16_, u16_, 0);
  }
  fn add_i32_(i32_: i32 ) {
    fbb_.AddElement::<i32>(TypeAliases::VT_I32_, i32_, 0);
  }
  fn add_u32_(u32_: u32 ) {
    fbb_.AddElement::<u32>(TypeAliases::VT_U32_, u32_, 0);
  }
  fn add_i64_(i64_: i64 ) {
    fbb_.AddElement::<i64>(TypeAliases::VT_I64_, i64_, 0);
  }
  fn add_u64_(u64_: u64 ) {
    fbb_.AddElement::<u64>(TypeAliases::VT_U64_, u64_, 0);
  }
  fn add_f32_(f32_: f32 ) {
    fbb_.AddElement::<f32>(TypeAliases::VT_F32_, f32_, 0.0);
  }
  fn add_f64_(f64_: f64 ) {
    fbb_.AddElement::<f64>(TypeAliases::VT_F64_, f64_, 0.0);
  }
  fn add_v8(v8: flatbuffers::Offset<flatbuffers::Vector<i8>> ) {
    fbb_.AddOffset(TypeAliases::VT_V8, v8);
  }
  fn add_vf64(vf64: flatbuffers::Offset<flatbuffers::Vector<f64>> ) {
    fbb_.AddOffset(TypeAliases::VT_VF64, vf64);
  }
  fn new(_fbb: &mut flatbuffers::FlatBufferBuilder) -> TypeAliasesBuilder {
    TypeAliasesBuilder {
      fbb_: _fbb,
      start_: _fbb.StartTable(),
    }
  }
  // TypeAliasesBuilder &operator=(const TypeAliasesBuilder &);
  fn finish(&mut self) -> flatbuffers::Offset<TypeAliases> {
    let end = self.fbb_.EndTable(self.start_);
    let o = end as flatbuffers::Offset<TypeAliases>;
    o
  }
}

#[inline]
fn CreateTypeAliases(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    i8_: i8  /* = 0 */,
    u8_: u8  /* = 0 */,
    i16_: i16  /* = 0 */,
    u16_: u16  /* = 0 */,
    i32_: i32  /* = 0 */,
    u32_: u32  /* = 0 */,
    i64_: i64  /* = 0 */,
    u64_: u64  /* = 0 */,
    f32_: f32  /* = 0.0 */,
    f64_: f64  /* = 0.0 */,
    v8: flatbuffers::Offset<flatbuffers::Vector<i8>>  /* = 0 */,
    vf64: flatbuffers::Offset<flatbuffers::Vector<f64>>  /* = 0 */) -> flatbuffers::Offset<TypeAliases> {
  let mut builder = TypeAliasesBuilder::new(_fbb);
  builder.add_f64_(f64_);
  builder.add_u64_(u64_);
  builder.add_i64_(i64_);
  builder.add_vf64(vf64);
  builder.add_v8(v8);
  builder.add_f32_(f32_);
  builder.add_u32_(u32_);
  builder.add_i32_(i32_);
  builder.add_u16_(u16_);
  builder.add_i16_(i16_);
  builder.add_u8_(u8_);
  builder.add_i8_(i8_);
  builder.Finish()
}

#[inline]
fn CreateTypeAliasesDirect(
    _fbb: &mut flatbuffers::FlatBufferBuilder,
    i8_: i8  /* = 0 */,
    u8_: u8  /* = 0 */,
    i16_: i16  /* = 0 */,
    u16_: u16  /* = 0 */,
    i32_: i32  /* = 0 */,
    u32_: u32  /* = 0 */,
    i64_: i64  /* = 0 */,
    u64_: u64  /* = 0 */,
    f32_: f32  /* = 0.0 */,
    f64_: f64  /* = 0.0 */,
    v8: Option<Vector<i8>> /* = nullptr */,
    vf64: Option<Vector<f64>> /* = nullptr */) -> flatbuffers::Offset<TypeAliases> {
  return CreateTypeAliases(
      _fbb,
      i8_,
      u8_,
      i16_,
      u16_,
      i32_,
      u32_,
      i64_,
      u64_,
      f32_,
      f64_,
      if v8 { _fbb.CreateVector::<i8>(*v8) } else { 0 },
      if vf64 { _fbb.CreateVector::<f64>(*vf64) } else { 0 });
}

#[inline]
fn VerifyAny(verifier: &flatbuffers::Verifier, obj: &const_void, type_: Any) -> bool {
  match type_ {
    Any::NONE => {
      return true;
    }
    Any::Monster => {
      let ptr = reinterpret_cast::<&Monster>(obj);
      return verifier.VerifyTable(ptr);
    }
    Any::TestSimpleTableWithEnum => {
      let ptr = reinterpret_cast::<&TestSimpleTableWithEnum>(obj);
      return verifier.VerifyTable(ptr);
    }
    Any::MyGame_Example2_Monster => {
      let ptr = reinterpret_cast::<&super::Example2::Monster>(obj);
      return verifier.VerifyTable(ptr);
    }
    _ => { return false; }
  }
}

#[inline]
fn VerifyAnyVector(verifier: &flatbuffers::Verifier, values: &flatbuffers::Vector<flatbuffers::Offset<void>>, types: &flatbuffers::Vector<uint8_t>) -> bool {
  if (!values || !types) { return !values && !types; }
  if (values.size() != types.size()) { return false; }
  for i in (0 as flatbuffers::uoffset_t)..values.size() {
    if (!VerifyAny(
        verifier,  values.Get(i), types.GetEnum::<Any>(i))) {
      return false;
    }
  }
  return true;
}

#[inline]
fn ColorTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const int32_t values[] = { 1, 2, 8 };
  static const char *names[] = {
    "Red",
    "Green",
    "Blue"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_ENUM, 3, type_codes, type_refs, values, names
  };
  return &tt;
  */
}

#[inline]
fn AnyTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    MonsterTypeTable,
    TestSimpleTableWithEnumTypeTable,
    MyGame::Example2::MonsterTypeTable
  };
  static const char *names[] = {
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_UNION, 4, type_codes, type_refs, nullptr, names
  };
  return &tt;
  */
}

#[inline]
fn TestTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_CHAR, 0, -1 }
  };
  static const int32_t values[] = { 0, 2, 4 };
  static const char *names[] = {
    "a",
    "b"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 2, type_codes, nullptr, values, names
  };
  return &tt;
  */
}

#[inline]
fn TestSimpleTableWithEnumTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, 0 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable
  };
  static const char *names[] = {
    "color"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 1, type_codes, type_refs, nullptr, names
  };
  return &tt;
  */
}

#[inline]
fn Vec3TypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    ColorTypeTable,
    TestTypeTable
  };
  static const int32_t values[] = { 0, 4, 8, 16, 24, 26, 32 };
  static const char *names[] = {
    "x",
    "y",
    "z",
    "test1",
    "test2",
    "test3"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 6, type_codes, type_refs, values, names
  };
  return &tt;
  */
}

#[inline]
fn AbilityTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 }
  };
  static const int32_t values[] = { 0, 4, 8 };
  static const char *names[] = {
    "id",
    "distance"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_STRUCT, 2, type_codes, nullptr, values, names
  };
  return &tt;
  */
}

#[inline]
fn StatTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_USHORT, 0, -1 }
  };
  static const char *names[] = {
    "id",
    "val",
    "count"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
  */
}

#[inline]
fn MonsterTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_CHAR, 0, 1 },
    { flatbuffers::ET_UTYPE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 0, 2 },
    { flatbuffers::ET_SEQUENCE, 1, 3 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 4 },
    { flatbuffers::ET_SEQUENCE, 0, 4 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 5 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_BOOL, 1, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_STRING, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 6 },
    { flatbuffers::ET_UCHAR, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 1, 3 },
    { flatbuffers::ET_LONG, 1, -1 },
    { flatbuffers::ET_DOUBLE, 1, -1 },
    { flatbuffers::ET_SEQUENCE, 0, 7 }
  };
  static flatbuffers::TypeFunction type_refs[] = {
    Vec3TypeTable,
    ColorTypeTable,
    AnyTypeTable,
    TestTypeTable,
    MonsterTypeTable,
    StatTypeTable,
    AbilityTypeTable,
    MyGame::InParentNamespaceTypeTable
  };
  static const char *names[] = {
    "pos",
    "mana",
    "hp",
    "name",
    "friendly",
    "inventory",
    "color",
    "test_type",
    "test",
    "test4",
    "testarrayofstring",
    "testarrayoftables",
    "enemy",
    "testnestedflatbuffer",
    "testempty",
    "testbool",
    "testhashs32_fnv1",
    "testhashu32_fnv1",
    "testhashs64_fnv1",
    "testhashu64_fnv1",
    "testhashs32_fnv1a",
    "testhashu32_fnv1a",
    "testhashs64_fnv1a",
    "testhashu64_fnv1a",
    "testarrayofbools",
    "testf",
    "testf2",
    "testf3",
    "testarrayofstring2",
    "testarrayofsortedstruct",
    "flex",
    "test5",
    "vector_of_longs",
    "vector_of_doubles",
    "parent_namespace_test"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 35, type_codes, type_refs, nullptr, names
  };
  return &tt;
  */
}

#[inline]
fn TypeAliasesTypeTable() -> &/*mut?*/flatbuffers::TypeTable {
  /* disable type table for now
  static flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_CHAR, 0, -1 },
    { flatbuffers::ET_UCHAR, 0, -1 },
    { flatbuffers::ET_SHORT, 0, -1 },
    { flatbuffers::ET_USHORT, 0, -1 },
    { flatbuffers::ET_INT, 0, -1 },
    { flatbuffers::ET_UINT, 0, -1 },
    { flatbuffers::ET_LONG, 0, -1 },
    { flatbuffers::ET_ULONG, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_CHAR, 1, -1 },
    { flatbuffers::ET_DOUBLE, 1, -1 }
  };
  static const char *names[] = {
    "i8_",
    "u8_",
    "i16_",
    "u16_",
    "i32_",
    "u32_",
    "i64_",
    "u64_",
    "f32_",
    "f64_",
    "v8",
    "vf64"
  };
  static flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 12, type_codes, nullptr, nullptr, names
  };
  return &tt;
  */
}

#[inline]
fn GetMonster(buf: &Vec<u8>) -> &Monster  {
  return flatbuffers::GetRoot::<Monster>(buf);
}

#[inline]
fn GetMutableMonster(buf: &Vec<u8>) -> &Monster {
  return flatbuffers::GetMutableRoot::<Monster>(buf);
}

#[inline]
fn MonsterIdentifier() -> &const_char{
  return "MONS";
}

#[inline]
fn MonsterBufferHasIdentifier(buf: &Vec<u8>) -> bool {
  return flatbuffers::BufferHasIdentifier(
      buf, MonsterIdentifier());
}

#[inline]
fn VerifyMonsterBuffer(
    verifier: &flatbuffers::Verifier) -> bool {
  return verifier.VerifyBuffer::<Monster>(MonsterIdentifier());
}

#[inline]
fn MonsterExtension() -> &const_char {
  return "mon";
}

#[inline]
fn FinishMonsterBuffer(
    fbb: &mut flatbuffers::FlatBufferBuilder,
    root: flatbuffers::Offset<Monster>) {
  fbb.Finish(root, MonsterIdentifier());
}

}  // pub mod Example
}  // pub mod MyGame

