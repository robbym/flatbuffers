// automatically generated by the FlatBuffers compiler, do not modify



//#include "include_test1_generated.rs"
//#include "include_test2_generated.rs"

pub mod MyGame {
  #[allow(unused_imports)]
  use std::mem;
  #[allow(unused_imports)]
  use std::marker::PhantomData;
  #[allow(unused_imports)]
  #[allow(unreachable_code)]
  extern crate flatbuffers;
  #[allow(unused_imports)]
  use self::flatbuffers::flexbuffers;
  #[allow(unused_imports)]
  use std::cmp::Ordering;

pub struct InParentNamespace<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for InParentNamespace<'buf> {}
impl<'buf> InParentNamespace<'buf> /* private flatbuffers::Table */ {
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           verifier.end_table();
  }
}

pub struct InParentNamespaceArgs<'a> {
}
pub struct InParentNamespaceBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> InParentNamespaceBuilder<'a> {
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> InParentNamespaceBuilder<'a> {
    let start = _fbb.start_table();
    InParentNamespaceBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // InParentNamespaceBuilder &operator=(const InParentNamespaceBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<InParentNamespace<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<InParentNamespace>::new(end);
    o
  }
}

#[inline]
pub fn CreateInParentNamespace<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &InParentNamespaceArgs<'a>) -> flatbuffers::Offset<InParentNamespace<'fbb>> {
  let mut builder = InParentNamespaceBuilder::new(_fbb);
  builder.finish()
}

pub mod Example2 {
  #[allow(unused_imports)]
  use std::mem;
  #[allow(unused_imports)]
  use std::marker::PhantomData;
  #[allow(unused_imports)]
  #[allow(unreachable_code)]
  extern crate flatbuffers;
  #[allow(unused_imports)]
  use self::flatbuffers::flexbuffers;
  #[allow(unused_imports)]
  use std::cmp::Ordering;

pub struct Monster<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for Monster<'buf> {}
impl<'buf> Monster<'buf> /* private flatbuffers::Table */ {
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           verifier.end_table();
  }
}

pub struct MonsterArgs<'a> {
}
pub struct MonsterBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> MonsterBuilder<'a> {
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder<'a> {
    let start = _fbb.start_table();
    MonsterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<Monster<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<Monster>::new(end);
    o
  }
}

#[inline]
pub fn CreateMonster<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &MonsterArgs<'a>) -> flatbuffers::Offset<Monster<'fbb>> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder.finish()
}

}  // pub mod Example2

pub mod Example {
  #[allow(unused_imports)]
  use std::mem;
  #[allow(unused_imports)]
  use std::marker::PhantomData;
  #[allow(unused_imports)]
  #[allow(unreachable_code)]
  extern crate flatbuffers;
  #[allow(unused_imports)]
  use self::flatbuffers::flexbuffers;
  #[allow(unused_imports)]
  use std::cmp::Ordering;

#[repr(i8)]
#[derive(Clone, Copy)]
pub enum Color {
  Red = 1,
  Green = 2,
  Blue = 8
}

const EnumValuesColor:[Color; 3] = [
  Color::Red,
  Color::Green,
  Color::Blue
];

const EnumNamesColor:[&'static str; 8] = [
    "Red",
    "Green",
    "",
    "",
    "",
    "",
    "",
    "Blue"
];

pub fn EnumNameColor(e: Color) -> &'static str {
  let index: usize = e as usize - Color::Red as usize;
  EnumNamesColor[index]
}

#[repr(u8)]
#[derive(Clone, Copy)]
pub enum Any {
  NONE = 0,
  Monster = 1,
  TestSimpleTableWithEnum = 2,
  MyGame_Example2_Monster = 3
}

const EnumValuesAny:[Any; 4] = [
  Any::NONE,
  Any::Monster,
  Any::TestSimpleTableWithEnum,
  Any::MyGame_Example2_Monster
];

const EnumNamesAny:[&'static str; 4] = [
    "NONE",
    "Monster",
    "TestSimpleTableWithEnum",
    "MyGame_Example2_Monster"
];

pub fn EnumNameAny(e: Any) -> &'static str {
  let index: usize = e as usize;
  EnumNamesAny[index]
}

// MANUALLY_ALIGNED_STRUCT(2)
#[repr(C, packed)]
#[derive(Clone, Copy)]
pub struct Test {
  a_: i16,
  b_: i8,
  padding0__: u8,
} // pub struct Test

impl Test {
  pub fn Reset(&mut self) {
    //memset(this, 0, size_of(Test));
  }
  pub fn new(_a: i16, _b: i8) -> Self {
    Test {
      a_: flatbuffers::endian_scalar(_a),
      b_: flatbuffers::endian_scalar(_b),


        padding0__: 0,
    }
  }
  fn a(&self) -> i16  {
    flatbuffers::endian_scalar(self.a_)
  }
  fn b(&self) -> i8  {
    flatbuffers::endian_scalar(self.b_)
  }
}
// STRUCT_END(Test, 4);

// MANUALLY_ALIGNED_STRUCT(16)
#[repr(C, packed)]
pub struct Vec3<'a> {
  x_: f32,
  y_: f32,
  z_: f32,
  padding0__: u32,
  test1_: f64,
  test2_: i8,
  padding1__: u8,
  test3_: &'a mut Test,
  padding2__: u16,
} // pub struct Vec3

impl<'a> Vec3<'a> {
  pub fn Reset(&mut self) {
    //memset(this, 0, size_of(Vec3));
  }
  pub fn new(_x: f32, _y: f32, _z: f32, _test1: f64, _test2: Color, _test3: &'a mut Test) -> Self {
    Vec3 {
      x_: _x,
      y_: _y,
      z_: _z,
      test1_: _test1,
      test2_: flatbuffers::endian_scalar(_test2 as i8),
      test3_: _test3,


        padding0__: 0,

        padding1__: 0,

        padding2__: 0,
    }
  }
  fn x(&self) -> f32  {
    self.x_
  }
  fn y(&self) -> f32  {
    self.y_
  }
  fn z(&self) -> f32  {
    self.z_
  }
  fn test1(&self) -> f64  {
    self.test1_
  }
  fn test2(&self) -> Color  {
    EnumValuesColor[flatbuffers::endian_scalar(self.test2_) as usize]
  }
  fn test3(&self) -> &Test {
    self.test3_
  }
}
// STRUCT_END(Vec3, 32);

// MANUALLY_ALIGNED_STRUCT(4)
#[repr(C, packed)]
#[derive(Clone, Copy)]
pub struct Ability {
  id_: u32,
  distance_: u32,
} // pub struct Ability

impl Ability {
  pub fn Reset(&mut self) {
    //memset(this, 0, size_of(Ability));
  }
  pub fn new(_id: u32, _distance: u32) -> Self {
    Ability {
      id_: flatbuffers::endian_scalar(_id),
      distance_: flatbuffers::endian_scalar(_distance),

    }
  }
  fn id(&self) -> u32  {
    flatbuffers::endian_scalar(self.id_)
  }
  fn KeyCompareLessThan(&self, o: &Ability) -> bool {
    self.id() < o.id()
  }
  fn KeyCompareWithValue(&self, val: u32) -> isize {
    let key = self.id();
    (key > val) as isize - (key < val) as isize
  }
  fn distance(&self) -> u32  {
    flatbuffers::endian_scalar(self.distance_)
  }
}
// STRUCT_END(Ability, 8);

pub struct TestSimpleTableWithEnum<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for TestSimpleTableWithEnum<'buf> {}
impl<'buf> TestSimpleTableWithEnum<'buf> /* private flatbuffers::Table */ {
    const VT_COLOR: isize = 4;

  fn color(&self) -> Color  {
    // yo
    EnumValuesColor[flatbuffers::get_field::<i8>(TestSimpleTableWithEnum::VT_COLOR, 2) as usize]
  }
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           flatbuffers::verify_field::<i8>(verifier, TestSimpleTableWithEnum::VT_COLOR) &&
           verifier.end_table();
  }
}

pub struct TestSimpleTableWithEnumArgs<'a> {
    color: Color  /* = Color::Green */,
}
pub struct TestSimpleTableWithEnumBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> TestSimpleTableWithEnumBuilder<'a> {
  pub fn add_color(&mut self, color: Color ) {
    self.fbb_.add_element::<i8>(TestSimpleTableWithEnum::VT_COLOR, color as i8, 2);
  }
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> TestSimpleTableWithEnumBuilder<'a> {
    let start = _fbb.start_table();
    TestSimpleTableWithEnumBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // TestSimpleTableWithEnumBuilder &operator=(const TestSimpleTableWithEnumBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<TestSimpleTableWithEnum<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<TestSimpleTableWithEnum>::new(end);
    o
  }
}

#[inline]
pub fn CreateTestSimpleTableWithEnum<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &TestSimpleTableWithEnumArgs<'a>) -> flatbuffers::Offset<TestSimpleTableWithEnum<'fbb>> {
  let mut builder = TestSimpleTableWithEnumBuilder::new(_fbb);
  builder.add_color(args.color());
  builder.finish()
}

pub struct Stat<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for Stat<'buf> {}
impl<'buf> Stat<'buf> /* private flatbuffers::Table */ {
    const VT_ID: isize = 4;
    const VT_VAL: isize = 6;
    const VT_COUNT: isize = 8;

  fn id(&self) -> &flatbuffers::String  {
    // yo
    flatbuffers::get_pointer::<&flatbuffers::String>(Stat::VT_ID)
  }
  fn val(&self) -> i64  {
    // yo
    flatbuffers::get_field::<i64>(Stat::VT_VAL, 0)
  }
  fn count(&self) -> u16  {
    // yo
    flatbuffers::get_field::<u16>(Stat::VT_COUNT, 0)
  }
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           flatbuffers::verify_offset(verifier, Stat::VT_ID) &&
           verifier.verify(self.id()) &&
           flatbuffers::verify_field::<i64>(verifier, Stat::VT_VAL) &&
           flatbuffers::verify_field::<u16>(verifier, Stat::VT_COUNT) &&
           verifier.end_table();
  }
}

pub struct StatArgs<'a> {
    id: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */,
}
pub struct StatBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> StatBuilder<'a> {
  pub fn add_id(&mut self, id: flatbuffers::Offset<flatbuffers::String> ) {
    self.fbb_.add_offset(Stat::VT_ID, id);
  }
  pub fn add_val(&mut self, val: i64 ) {
    self.fbb_.add_element::<i64>(Stat::VT_VAL, val, 0);
  }
  pub fn add_count(&mut self, count: u16 ) {
    self.fbb_.add_element::<u16>(Stat::VT_COUNT, count, 0);
  }
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> StatBuilder<'a> {
    let start = _fbb.start_table();
    StatBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // StatBuilder &operator=(const StatBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<Stat<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<Stat>::new(end);
    o
  }
}

#[inline]
pub fn CreateStat<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &StatArgs<'a>) -> flatbuffers::Offset<Stat<'fbb>> {
  let mut builder = StatBuilder::new(_fbb);
  builder.add_val(args.val());
  builder.add_id(args.id());
  builder.add_count(args.count());
  builder.finish()
}

#[inline]
pub fn CreateStatDirect<'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    id: Option<&str> /* = nullptr */,
    val: i64  /* = 0 */,
    count: u16  /* = 0 */) -> flatbuffers::Offset<Stat<'fbb>> {
  let _offset_id = if let Some(x) = id { _fbb.create_string(x) } else { flatbuffers::Offset::new(0) };
  return CreateStat(
      _fbb,
      _offset_id,
      val,
      count);
}

/// an example documentation comment: monster object
pub struct Monster<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for Monster<'buf> {}
impl<'buf> Monster<'buf> /* private flatbuffers::Table */ {
    const VT_POS: isize = 4;
    const VT_MANA: isize = 6;
    const VT_HP: isize = 8;
    const VT_NAME: isize = 10;
    const VT_INVENTORY: isize = 14;
    const VT_COLOR: isize = 16;
    const VT_TEST_TYPE: isize = 18;
    const VT_TEST: isize = 20;
    const VT_TEST4: isize = 22;
    const VT_TESTARRAYOFSTRING: isize = 24;
    const VT_TESTARRAYOFTABLES: isize = 26;
    const VT_ENEMY: isize = 28;
    const VT_TESTNESTEDFLATBUFFER: isize = 30;
    const VT_TESTEMPTY: isize = 32;
    const VT_TESTBOOL: isize = 34;
    const VT_TESTHASHS32_FNV1: isize = 36;
    const VT_TESTHASHU32_FNV1: isize = 38;
    const VT_TESTHASHS64_FNV1: isize = 40;
    const VT_TESTHASHU64_FNV1: isize = 42;
    const VT_TESTHASHS32_FNV1A: isize = 44;
    const VT_TESTHASHU32_FNV1A: isize = 46;
    const VT_TESTHASHS64_FNV1A: isize = 48;
    const VT_TESTHASHU64_FNV1A: isize = 50;
    const VT_TESTARRAYOFBOOLS: isize = 52;
    const VT_TESTF: isize = 54;
    const VT_TESTF2: isize = 56;
    const VT_TESTF3: isize = 58;
    const VT_TESTARRAYOFSTRING2: isize = 60;
    const VT_TESTARRAYOFSORTEDSTRUCT: isize = 62;
    const VT_FLEX: isize = 64;
    const VT_TEST5: isize = 66;
    const VT_VECTOR_OF_LONGS: isize = 68;
    const VT_VECTOR_OF_DOUBLES: isize = 70;
    const VT_PARENT_NAMESPACE_TEST: isize = 72;

  fn pos(&self) -> &Vec3<>  {
    // yo
    flatbuffers::get_struct::<&Vec3<>>(Monster::VT_POS)
  }
  fn mana(&self) -> i16  {
    // yo
    flatbuffers::get_field::<i16>(Monster::VT_MANA, 150)
  }
  fn hp(&self) -> i16  {
    // yo
    flatbuffers::get_field::<i16>(Monster::VT_HP, 100)
  }
  fn name(&self) -> &flatbuffers::String  {
    // yo
    flatbuffers::get_pointer::<&flatbuffers::String>(Monster::VT_NAME)
  }
  fn KeyCompareLessThan(&self, o: &Monster) -> bool {
    return *self.name() < *o.name();
  }
  fn KeyCompareWithValue(&self, _val: &str) -> Ordering {
    Ordering::Equal
    // TODO(rw): self.name().cmp(val)
  }
  fn inventory(&self) -> &&[u8]  {
    // yo
    flatbuffers::get_pointer::<&&[u8]>(Monster::VT_INVENTORY)
  }
  fn color(&self) -> Color  {
    // yo
    EnumValuesColor[flatbuffers::get_field::<i8>(Monster::VT_COLOR, 8) as usize]
  }
  fn test_type(&self) -> Any  {
    // yo
    EnumValuesAny[flatbuffers::get_field::<u8>(Monster::VT_TEST_TYPE, 0) as usize]
  }
  fn test(&self) -> &&flatbuffers::Void  {
    // yo
    flatbuffers::get_pointer::<&&flatbuffers::Void>(Monster::VT_TEST)
  }
  // TODO(?) template<typename T> const T *test_as() const;
  // TODO: fn test_as_Monster() -> &Monster {
// TODO:     if test_type() == Any::Monster { static_cast::<&Monster>(test()) } else { nullptr }
// TODO:   }
  // TODO: fn test_as_TestSimpleTableWithEnum() -> &TestSimpleTableWithEnum {
// TODO:     if test_type() == Any::TestSimpleTableWithEnum { static_cast::<&TestSimpleTableWithEnum>(test()) } else { nullptr }
// TODO:   }
  // TODO: fn test_as_MyGame_Example2_Monster() -> &super::Example2::Monster {
// TODO:     if test_type() == Any::MyGame_Example2_Monster { static_cast::<&super::Example2::Monster>(test()) } else { nullptr }
// TODO:   }
  fn test4(&self) -> &&[&Test]  {
    // yo
    flatbuffers::get_pointer::<&&[&Test]>(Monster::VT_TEST4)
  }
  fn testarrayofstring(&self) -> &&[flatbuffers::Offset<flatbuffers::String>]  {
    // yo
    flatbuffers::get_pointer::<&&[flatbuffers::Offset<flatbuffers::String>]>(Monster::VT_TESTARRAYOFSTRING)
  }
  /// an example documentation comment: this will end up in the generated code
  /// multiline too
  fn testarrayoftables(&self) -> &&[flatbuffers::Offset<Monster<>>]  {
    // yo
    flatbuffers::get_pointer::<&&[flatbuffers::Offset<Monster<>>]>(Monster::VT_TESTARRAYOFTABLES)
  }
  fn enemy(&self) -> &Monster<>  {
    // yo
    flatbuffers::get_pointer::<&Monster<>>(Monster::VT_ENEMY)
  }
  fn testnestedflatbuffer(&self) -> &&[u8]  {
    // yo
    flatbuffers::get_pointer::<&&[u8]>(Monster::VT_TESTNESTEDFLATBUFFER)
  }
//TODO: mutable nested root
  fn testnestedflatbuffer_nested_root(&self) -> &Monster{
    unimplemented!()
    // TODO(rw): return flatbuffers::get_root::<Monster>(self.testnestedflatbuffer().Data());
  }
  fn testempty(&self) -> &Stat<>  {
    // yo
    flatbuffers::get_pointer::<&Stat<>>(Monster::VT_TESTEMPTY)
  }
  fn testbool(&self) -> bool  {
    // yo
    flatbuffers::get_field::<u8>(Monster::VT_TESTBOOL, 0) != 0
  }
  fn testhashs32_fnv1(&self) -> i32  {
    // yo
    flatbuffers::get_field::<i32>(Monster::VT_TESTHASHS32_FNV1, 0)
  }
  fn testhashu32_fnv1(&self) -> u32  {
    // yo
    flatbuffers::get_field::<u32>(Monster::VT_TESTHASHU32_FNV1, 0)
  }
  fn testhashs64_fnv1(&self) -> i64  {
    // yo
    flatbuffers::get_field::<i64>(Monster::VT_TESTHASHS64_FNV1, 0)
  }
  fn testhashu64_fnv1(&self) -> u64  {
    // yo
    flatbuffers::get_field::<u64>(Monster::VT_TESTHASHU64_FNV1, 0)
  }
  fn testhashs32_fnv1a(&self) -> i32  {
    // yo
    flatbuffers::get_field::<i32>(Monster::VT_TESTHASHS32_FNV1A, 0)
  }
  fn testhashu32_fnv1a(&self) -> u32  {
    // yo
    flatbuffers::get_field::<u32>(Monster::VT_TESTHASHU32_FNV1A, 0)
  }
  fn testhashs64_fnv1a(&self) -> i64  {
    // yo
    flatbuffers::get_field::<i64>(Monster::VT_TESTHASHS64_FNV1A, 0)
  }
  fn testhashu64_fnv1a(&self) -> u64  {
    // yo
    flatbuffers::get_field::<u64>(Monster::VT_TESTHASHU64_FNV1A, 0)
  }
  fn testarrayofbools(&self) -> &&[u8]  {
    // yo
    flatbuffers::get_pointer::<&&[u8]>(Monster::VT_TESTARRAYOFBOOLS)
  }
  fn testf(&self) -> f32  {
    // yo
    flatbuffers::get_field::<f32>(Monster::VT_TESTF, 3.14159)
  }
  fn testf2(&self) -> f32  {
    // yo
    flatbuffers::get_field::<f32>(Monster::VT_TESTF2, 3.0)
  }
  fn testf3(&self) -> f32  {
    // yo
    flatbuffers::get_field::<f32>(Monster::VT_TESTF3, 0.0)
  }
  fn testarrayofstring2(&self) -> &&[flatbuffers::Offset<flatbuffers::String>]  {
    // yo
    flatbuffers::get_pointer::<&&[flatbuffers::Offset<flatbuffers::String>]>(Monster::VT_TESTARRAYOFSTRING2)
  }
  fn testarrayofsortedstruct(&self) -> &&[&Ability]  {
    // yo
    flatbuffers::get_pointer::<&&[&Ability]>(Monster::VT_TESTARRAYOFSORTEDSTRUCT)
  }
  fn flex(&self) -> &&[u8]  {
    // yo
    flatbuffers::get_pointer::<&&[u8]>(Monster::VT_FLEX)
  }
  fn test5(&self) -> &&[&Test]  {
    // yo
    flatbuffers::get_pointer::<&&[&Test]>(Monster::VT_TEST5)
  }
  fn vector_of_longs(&self) -> &&[i64]  {
    // yo
    flatbuffers::get_pointer::<&&[i64]>(Monster::VT_VECTOR_OF_LONGS)
  }
  fn vector_of_doubles(&self) -> &&[f64]  {
    // yo
    flatbuffers::get_pointer::<&&[f64]>(Monster::VT_VECTOR_OF_DOUBLES)
  }
  fn parent_namespace_test(&self) -> &super::InParentNamespace  {
    // yo
    flatbuffers::get_pointer::<&super::InParentNamespace>(Monster::VT_PARENT_NAMESPACE_TEST)
  }
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           flatbuffers::verify_field::<Vec3<>>(verifier, Monster::VT_POS) &&
           flatbuffers::verify_field::<i16>(verifier, Monster::VT_MANA) &&
           flatbuffers::verify_field::<i16>(verifier, Monster::VT_HP) &&
           flatbuffers::verify_offset_required(verifier, Monster::VT_NAME) &&
           verifier.verify(self.name()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_INVENTORY) &&
           verifier.verify(self.inventory()) &&
           flatbuffers::verify_field::<i8>(verifier, Monster::VT_COLOR) &&
           flatbuffers::verify_field::<u8>(verifier, Monster::VT_TEST_TYPE) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TEST) &&
           VerifyAny(verifier, self.test(), self.test_type()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TEST4) &&
           verifier.verify(self.test4()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTARRAYOFSTRING) &&
           verifier.verify(self.testarrayofstring()) &&
           verifier.verify_vector_of_strings(self.testarrayofstring()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTARRAYOFTABLES) &&
           verifier.verify(self.testarrayoftables()) &&
           verifier.verify_vector_of_tables(self.testarrayoftables()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_ENEMY) &&
           verifier.verify_table(self.enemy()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTNESTEDFLATBUFFER) &&
           verifier.verify(self.testnestedflatbuffer()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTEMPTY) &&
           verifier.verify_table(self.testempty()) &&
           flatbuffers::verify_field::<u8>(verifier, Monster::VT_TESTBOOL) &&
           flatbuffers::verify_field::<i32>(verifier, Monster::VT_TESTHASHS32_FNV1) &&
           flatbuffers::verify_field::<u32>(verifier, Monster::VT_TESTHASHU32_FNV1) &&
           flatbuffers::verify_field::<i64>(verifier, Monster::VT_TESTHASHS64_FNV1) &&
           flatbuffers::verify_field::<u64>(verifier, Monster::VT_TESTHASHU64_FNV1) &&
           flatbuffers::verify_field::<i32>(verifier, Monster::VT_TESTHASHS32_FNV1A) &&
           flatbuffers::verify_field::<u32>(verifier, Monster::VT_TESTHASHU32_FNV1A) &&
           flatbuffers::verify_field::<i64>(verifier, Monster::VT_TESTHASHS64_FNV1A) &&
           flatbuffers::verify_field::<u64>(verifier, Monster::VT_TESTHASHU64_FNV1A) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTARRAYOFBOOLS) &&
           verifier.verify(self.testarrayofbools()) &&
           flatbuffers::verify_field::<f32>(verifier, Monster::VT_TESTF) &&
           flatbuffers::verify_field::<f32>(verifier, Monster::VT_TESTF2) &&
           flatbuffers::verify_field::<f32>(verifier, Monster::VT_TESTF3) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTARRAYOFSTRING2) &&
           verifier.verify(self.testarrayofstring2()) &&
           verifier.verify_vector_of_strings(self.testarrayofstring2()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TESTARRAYOFSORTEDSTRUCT) &&
           verifier.verify(self.testarrayofsortedstruct()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_FLEX) &&
           verifier.verify(self.flex()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_TEST5) &&
           verifier.verify(self.test5()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_VECTOR_OF_LONGS) &&
           verifier.verify(self.vector_of_longs()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_VECTOR_OF_DOUBLES) &&
           verifier.verify(self.vector_of_doubles()) &&
           flatbuffers::verify_offset(verifier, Monster::VT_PARENT_NAMESPACE_TEST) &&
           verifier.verify_table(self.parent_namespace_test()) &&
           verifier.end_table();
  }
}

//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_Monster_X() -> &Monster {
//  return test_as_Monster();
//}
//
//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_TestSimpleTableWithEnum_X() -> &TestSimpleTableWithEnum {
//  return test_as_TestSimpleTableWithEnum();
//}
//
//TODO: inject these functions into impl for type
//#[inline]
//fn Monster_MEMBER_test_as_X_super::Example2::Monster_X() -> &super::Example2::Monster {
//  return test_as_MyGame_Example2_Monster();
//}
//
pub struct MonsterArgs<'a> {
    pos: &'a Vec3<'a > /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: flatbuffers::Offset<flatbuffers::String>  /* = 0 */,
    inventory: flatbuffers::Offset<&'a [u8]>  /* = 0 */,
    color: Color  /* = Color::Blue */,
    test_type: Any  /* = Any::NONE */,
    test: flatbuffers::Offset<&'a flatbuffers::Void>  /* = 0 */,
    test4: flatbuffers::Offset<&'a [&'a Test]>  /* = 0 */,
    testarrayofstring: flatbuffers::Offset<&'a [flatbuffers::Offset<flatbuffers::String>]>  /* = 0 */,
    testarrayoftables: flatbuffers::Offset<&'a [flatbuffers::Offset<'a Monster<'a >>]>  /* = 0 */,
    enemy: flatbuffers::Offset<'a Monster<'a >>  /* = 0 */,
    testnestedflatbuffer: flatbuffers::Offset<&'a [u8]>  /* = 0 */,
    testempty: flatbuffers::Offset<'a Stat<'a >>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: flatbuffers::Offset<&'a [u8]>  /* = 0 */,
    testf: f32  /* = 3.14159 */,
    testf2: f32  /* = 3.0 */,
    testf3: f32  /* = 0.0 */,
    testarrayofstring2: flatbuffers::Offset<&'a [flatbuffers::Offset<flatbuffers::String>]>  /* = 0 */,
    testarrayofsortedstruct: flatbuffers::Offset<&'a [&'a Ability]>  /* = 0 */,
    flex: flatbuffers::Offset<&'a [u8]>  /* = 0 */,
    test5: flatbuffers::Offset<&'a [&'a Test]>  /* = 0 */,
    vector_of_longs: flatbuffers::Offset<&'a [i64]>  /* = 0 */,
    vector_of_doubles: flatbuffers::Offset<&'a [f64]>  /* = 0 */,
    parent_namespace_test: flatbuffers::Offset<'a super::InParentNamespace>  /* = 0 */,
}
pub struct MonsterBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> MonsterBuilder<'a> {
  pub fn add_pos(&mut self, pos: &Vec3<>) {
    self.fbb_.add_struct(Monster::VT_POS, pos);
  }
  pub fn add_mana(&mut self, mana: i16 ) {
    self.fbb_.add_element::<i16>(Monster::VT_MANA, mana, 150);
  }
  pub fn add_hp(&mut self, hp: i16 ) {
    self.fbb_.add_element::<i16>(Monster::VT_HP, hp, 100);
  }
  pub fn add_name(&mut self, name: flatbuffers::Offset<flatbuffers::String> ) {
    self.fbb_.add_offset(Monster::VT_NAME, name);
  }
  pub fn add_inventory(&mut self, inventory: flatbuffers::Offset<&[u8]> ) {
    self.fbb_.add_offset(Monster::VT_INVENTORY, inventory);
  }
  pub fn add_color(&mut self, color: Color ) {
    self.fbb_.add_element::<i8>(Monster::VT_COLOR, color as i8, 8);
  }
  pub fn add_test_type(&mut self, test_type: Any ) {
    self.fbb_.add_element::<u8>(Monster::VT_TEST_TYPE, test_type as u8, 0);
  }
  pub fn add_test(&mut self, test: flatbuffers::Offset<&flatbuffers::Void> ) {
    self.fbb_.add_offset(Monster::VT_TEST, test);
  }
  pub fn add_test4(&mut self, test4: flatbuffers::Offset<&[&Test]> ) {
    self.fbb_.add_offset(Monster::VT_TEST4, test4);
  }
  pub fn add_testarrayofstring(&mut self, testarrayofstring: flatbuffers::Offset<&[flatbuffers::Offset<flatbuffers::String>]> ) {
    self.fbb_.add_offset(Monster::VT_TESTARRAYOFSTRING, testarrayofstring);
  }
  pub fn add_testarrayoftables(&mut self, testarrayoftables: flatbuffers::Offset<&[flatbuffers::Offset<Monster<>>]> ) {
    self.fbb_.add_offset(Monster::VT_TESTARRAYOFTABLES, testarrayoftables);
  }
  pub fn add_enemy(&mut self, enemy: flatbuffers::Offset<Monster<>> ) {
    self.fbb_.add_offset(Monster::VT_ENEMY, enemy);
  }
  pub fn add_testnestedflatbuffer(&mut self, testnestedflatbuffer: flatbuffers::Offset<&[u8]> ) {
    self.fbb_.add_offset(Monster::VT_TESTNESTEDFLATBUFFER, testnestedflatbuffer);
  }
  pub fn add_testempty(&mut self, testempty: flatbuffers::Offset<Stat<>> ) {
    self.fbb_.add_offset(Monster::VT_TESTEMPTY, testempty);
  }
  pub fn add_testbool(&mut self, testbool: bool ) {
    self.fbb_.add_element::<u8>(Monster::VT_TESTBOOL, testbool as u8, 0);
  }
  pub fn add_testhashs32_fnv1(&mut self, testhashs32_fnv1: i32 ) {
    self.fbb_.add_element::<i32>(Monster::VT_TESTHASHS32_FNV1, testhashs32_fnv1, 0);
  }
  pub fn add_testhashu32_fnv1(&mut self, testhashu32_fnv1: u32 ) {
    self.fbb_.add_element::<u32>(Monster::VT_TESTHASHU32_FNV1, testhashu32_fnv1, 0);
  }
  pub fn add_testhashs64_fnv1(&mut self, testhashs64_fnv1: i64 ) {
    self.fbb_.add_element::<i64>(Monster::VT_TESTHASHS64_FNV1, testhashs64_fnv1, 0);
  }
  pub fn add_testhashu64_fnv1(&mut self, testhashu64_fnv1: u64 ) {
    self.fbb_.add_element::<u64>(Monster::VT_TESTHASHU64_FNV1, testhashu64_fnv1, 0);
  }
  pub fn add_testhashs32_fnv1a(&mut self, testhashs32_fnv1a: i32 ) {
    self.fbb_.add_element::<i32>(Monster::VT_TESTHASHS32_FNV1A, testhashs32_fnv1a, 0);
  }
  pub fn add_testhashu32_fnv1a(&mut self, testhashu32_fnv1a: u32 ) {
    self.fbb_.add_element::<u32>(Monster::VT_TESTHASHU32_FNV1A, testhashu32_fnv1a, 0);
  }
  pub fn add_testhashs64_fnv1a(&mut self, testhashs64_fnv1a: i64 ) {
    self.fbb_.add_element::<i64>(Monster::VT_TESTHASHS64_FNV1A, testhashs64_fnv1a, 0);
  }
  pub fn add_testhashu64_fnv1a(&mut self, testhashu64_fnv1a: u64 ) {
    self.fbb_.add_element::<u64>(Monster::VT_TESTHASHU64_FNV1A, testhashu64_fnv1a, 0);
  }
  pub fn add_testarrayofbools(&mut self, testarrayofbools: flatbuffers::Offset<&[u8]> ) {
    self.fbb_.add_offset(Monster::VT_TESTARRAYOFBOOLS, testarrayofbools);
  }
  pub fn add_testf(&mut self, testf: f32 ) {
    self.fbb_.add_element::<f32>(Monster::VT_TESTF, testf, 3.14159);
  }
  pub fn add_testf2(&mut self, testf2: f32 ) {
    self.fbb_.add_element::<f32>(Monster::VT_TESTF2, testf2, 3.0);
  }
  pub fn add_testf3(&mut self, testf3: f32 ) {
    self.fbb_.add_element::<f32>(Monster::VT_TESTF3, testf3, 0.0);
  }
  pub fn add_testarrayofstring2(&mut self, testarrayofstring2: flatbuffers::Offset<&[flatbuffers::Offset<flatbuffers::String>]> ) {
    self.fbb_.add_offset(Monster::VT_TESTARRAYOFSTRING2, testarrayofstring2);
  }
  pub fn add_testarrayofsortedstruct(&mut self, testarrayofsortedstruct: flatbuffers::Offset<&[&Ability]> ) {
    self.fbb_.add_offset(Monster::VT_TESTARRAYOFSORTEDSTRUCT, testarrayofsortedstruct);
  }
  pub fn add_flex(&mut self, flex: flatbuffers::Offset<&[u8]> ) {
    self.fbb_.add_offset(Monster::VT_FLEX, flex);
  }
  pub fn add_test5(&mut self, test5: flatbuffers::Offset<&[&Test]> ) {
    self.fbb_.add_offset(Monster::VT_TEST5, test5);
  }
  pub fn add_vector_of_longs(&mut self, vector_of_longs: flatbuffers::Offset<&[i64]> ) {
    self.fbb_.add_offset(Monster::VT_VECTOR_OF_LONGS, vector_of_longs);
  }
  pub fn add_vector_of_doubles(&mut self, vector_of_doubles: flatbuffers::Offset<&[f64]> ) {
    self.fbb_.add_offset(Monster::VT_VECTOR_OF_DOUBLES, vector_of_doubles);
  }
  pub fn add_parent_namespace_test(&mut self, parent_namespace_test: flatbuffers::Offset<super::InParentNamespace> ) {
    self.fbb_.add_offset(Monster::VT_PARENT_NAMESPACE_TEST, parent_namespace_test);
  }
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> MonsterBuilder<'a> {
    let start = _fbb.start_table();
    MonsterBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // MonsterBuilder &operator=(const MonsterBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<Monster<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<Monster>::new(end);
    self.fbb_.required(&o, Monster::VT_NAME);
    o
  }
}

#[inline]
pub fn CreateMonster<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &MonsterArgs<'a>) -> flatbuffers::Offset<Monster<'fbb>> {
  let mut builder = MonsterBuilder::new(_fbb);
  builder.add_testhashu64_fnv1a(args.testhashu64_fnv1a());
  builder.add_testhashs64_fnv1a(args.testhashs64_fnv1a());
  builder.add_testhashu64_fnv1(args.testhashu64_fnv1());
  builder.add_testhashs64_fnv1(args.testhashs64_fnv1());
  builder.add_parent_namespace_test(args.parent_namespace_test());
  builder.add_vector_of_doubles(args.vector_of_doubles());
  builder.add_vector_of_longs(args.vector_of_longs());
  builder.add_test5(args.test5());
  builder.add_flex(args.flex());
  builder.add_testarrayofsortedstruct(args.testarrayofsortedstruct());
  builder.add_testarrayofstring2(args.testarrayofstring2());
  builder.add_testf3(args.testf3());
  builder.add_testf2(args.testf2());
  builder.add_testf(args.testf());
  builder.add_testarrayofbools(args.testarrayofbools());
  builder.add_testhashu32_fnv1a(args.testhashu32_fnv1a());
  builder.add_testhashs32_fnv1a(args.testhashs32_fnv1a());
  builder.add_testhashu32_fnv1(args.testhashu32_fnv1());
  builder.add_testhashs32_fnv1(args.testhashs32_fnv1());
  builder.add_testempty(args.testempty());
  builder.add_testnestedflatbuffer(args.testnestedflatbuffer());
  builder.add_enemy(args.enemy());
  builder.add_testarrayoftables(args.testarrayoftables());
  builder.add_testarrayofstring(args.testarrayofstring());
  builder.add_test4(args.test4());
  builder.add_test(args.test());
  builder.add_inventory(args.inventory());
  builder.add_name(args.name());
  builder.add_pos(args.pos());
  builder.add_hp(args.hp());
  builder.add_mana(args.mana());
  builder.add_testbool(args.testbool());
  builder.add_test_type(args.test_type());
  builder.add_color(args.color());
  builder.finish()
}

#[inline]
pub fn CreateMonsterDirect<'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    pos: &Vec3<> /* = 0 */,
    mana: i16  /* = 150 */,
    hp: i16  /* = 100 */,
    name: Option<&str> /* = nullptr */,
    inventory: Option<&[u8]> /* = nullptr */,
    color: Color  /* = Color::Blue */,
    test_type: Any  /* = Any::NONE */,
    test: flatbuffers::Offset<&flatbuffers::Void>  /* = 0 */,
    test4: Option<&[&Test]> /* = nullptr */,
    testarrayofstring: Option<&[flatbuffers::Offset<flatbuffers::String>]> /* = nullptr */,
    testarrayoftables: Option<&[flatbuffers::Offset<Monster<>>]> /* = nullptr */,
    enemy: flatbuffers::Offset<Monster<>>  /* = 0 */,
    testnestedflatbuffer: Option<&[u8]> /* = nullptr */,
    testempty: flatbuffers::Offset<Stat<>>  /* = 0 */,
    testbool: bool  /* = false */,
    testhashs32_fnv1: i32  /* = 0 */,
    testhashu32_fnv1: u32  /* = 0 */,
    testhashs64_fnv1: i64  /* = 0 */,
    testhashu64_fnv1: u64  /* = 0 */,
    testhashs32_fnv1a: i32  /* = 0 */,
    testhashu32_fnv1a: u32  /* = 0 */,
    testhashs64_fnv1a: i64  /* = 0 */,
    testhashu64_fnv1a: u64  /* = 0 */,
    testarrayofbools: Option<&[u8]> /* = nullptr */,
    testf: f32  /* = 3.14159 */,
    testf2: f32  /* = 3.0 */,
    testf3: f32  /* = 0.0 */,
    testarrayofstring2: Option<&[flatbuffers::Offset<flatbuffers::String>]> /* = nullptr */,
    testarrayofsortedstruct: Option<&[&Ability]> /* = nullptr */,
    flex: Option<&[u8]> /* = nullptr */,
    test5: Option<&[&Test]> /* = nullptr */,
    vector_of_longs: Option<&[i64]> /* = nullptr */,
    vector_of_doubles: Option<&[f64]> /* = nullptr */,
    parent_namespace_test: flatbuffers::Offset<super::InParentNamespace>  /* = 0 */) -> flatbuffers::Offset<Monster<'fbb>> {
  let _offset_name = if let Some(x) = name { _fbb.create_string(x) } else { flatbuffers::Offset::new(0) };
  let _offset_inventory = if let Some(x) = inventory { _fbb.create_vector::<u8>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_test4 = if let Some(x) = test4 { _fbb.create_vector_of_structs::<&Test>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testarrayofstring = if let Some(x) = testarrayofstring { _fbb.create_vector::<flatbuffers::Offset<flatbuffers::String>>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testarrayoftables = if let Some(x) = testarrayoftables { _fbb.create_vector::<flatbuffers::Offset<Monster<>>>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testnestedflatbuffer = if let Some(x) = testnestedflatbuffer { _fbb.create_vector::<u8>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testarrayofbools = if let Some(x) = testarrayofbools { _fbb.create_vector::<u8>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testarrayofstring2 = if let Some(x) = testarrayofstring2 { _fbb.create_vector::<flatbuffers::Offset<flatbuffers::String>>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_testarrayofsortedstruct = if let Some(x) = testarrayofsortedstruct { _fbb.create_vector_of_structs::<&Ability>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_flex = if let Some(x) = flex { _fbb.create_vector::<u8>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_test5 = if let Some(x) = test5 { _fbb.create_vector_of_structs::<&Test>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_vector_of_longs = if let Some(x) = vector_of_longs { _fbb.create_vector::<i64>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_vector_of_doubles = if let Some(x) = vector_of_doubles { _fbb.create_vector::<f64>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  return CreateMonster(
      _fbb,
      pos,
      mana,
      hp,
      _offset_name,
      _offset_inventory,
      color,
      test_type,
      test,
      _offset_test4,
      _offset_testarrayofstring,
      _offset_testarrayoftables,
      enemy,
      _offset_testnestedflatbuffer,
      testempty,
      testbool,
      testhashs32_fnv1,
      testhashu32_fnv1,
      testhashs64_fnv1,
      testhashu64_fnv1,
      testhashs32_fnv1a,
      testhashu32_fnv1a,
      testhashs64_fnv1a,
      testhashu64_fnv1a,
      _offset_testarrayofbools,
      testf,
      testf2,
      testf3,
      _offset_testarrayofstring2,
      _offset_testarrayofsortedstruct,
      _offset_flex,
      _offset_test5,
      _offset_vector_of_longs,
      _offset_vector_of_doubles,
      parent_namespace_test);
}

pub struct TypeAliases<'buf> {
  _phantom: PhantomData<&'buf ()>,
}
impl<'buf> flatbuffers::Table for TypeAliases<'buf> {}
impl<'buf> TypeAliases<'buf> /* private flatbuffers::Table */ {
    const VT_I8_: isize = 4;
    const VT_U8_: isize = 6;
    const VT_I16_: isize = 8;
    const VT_U16_: isize = 10;
    const VT_I32_: isize = 12;
    const VT_U32_: isize = 14;
    const VT_I64_: isize = 16;
    const VT_U64_: isize = 18;
    const VT_F32_: isize = 20;
    const VT_F64_: isize = 22;
    const VT_V8: isize = 24;
    const VT_VF64: isize = 26;

  fn i8_(&self) -> i8  {
    // yo
    flatbuffers::get_field::<i8>(TypeAliases::VT_I8_, 0)
  }
  fn u8_(&self) -> u8  {
    // yo
    flatbuffers::get_field::<u8>(TypeAliases::VT_U8_, 0)
  }
  fn i16_(&self) -> i16  {
    // yo
    flatbuffers::get_field::<i16>(TypeAliases::VT_I16_, 0)
  }
  fn u16_(&self) -> u16  {
    // yo
    flatbuffers::get_field::<u16>(TypeAliases::VT_U16_, 0)
  }
  fn i32_(&self) -> i32  {
    // yo
    flatbuffers::get_field::<i32>(TypeAliases::VT_I32_, 0)
  }
  fn u32_(&self) -> u32  {
    // yo
    flatbuffers::get_field::<u32>(TypeAliases::VT_U32_, 0)
  }
  fn i64_(&self) -> i64  {
    // yo
    flatbuffers::get_field::<i64>(TypeAliases::VT_I64_, 0)
  }
  fn u64_(&self) -> u64  {
    // yo
    flatbuffers::get_field::<u64>(TypeAliases::VT_U64_, 0)
  }
  fn f32_(&self) -> f32  {
    // yo
    flatbuffers::get_field::<f32>(TypeAliases::VT_F32_, 0.0)
  }
  fn f64_(&self) -> f64  {
    // yo
    flatbuffers::get_field::<f64>(TypeAliases::VT_F64_, 0.0)
  }
  fn v8(&self) -> &&[i8]  {
    // yo
    flatbuffers::get_pointer::<&&[i8]>(TypeAliases::VT_V8)
  }
  fn vf64(&self) -> &&[f64]  {
    // yo
    flatbuffers::get_pointer::<&&[f64]>(TypeAliases::VT_VF64)
  }
  fn Verify(&self, verifier: &mut flatbuffers::Verifier) -> bool {
    return flatbuffers::verify_table_start(verifier) &&
           flatbuffers::verify_field::<i8>(verifier, TypeAliases::VT_I8_) &&
           flatbuffers::verify_field::<u8>(verifier, TypeAliases::VT_U8_) &&
           flatbuffers::verify_field::<i16>(verifier, TypeAliases::VT_I16_) &&
           flatbuffers::verify_field::<u16>(verifier, TypeAliases::VT_U16_) &&
           flatbuffers::verify_field::<i32>(verifier, TypeAliases::VT_I32_) &&
           flatbuffers::verify_field::<u32>(verifier, TypeAliases::VT_U32_) &&
           flatbuffers::verify_field::<i64>(verifier, TypeAliases::VT_I64_) &&
           flatbuffers::verify_field::<u64>(verifier, TypeAliases::VT_U64_) &&
           flatbuffers::verify_field::<f32>(verifier, TypeAliases::VT_F32_) &&
           flatbuffers::verify_field::<f64>(verifier, TypeAliases::VT_F64_) &&
           flatbuffers::verify_offset(verifier, TypeAliases::VT_V8) &&
           verifier.verify(self.v8()) &&
           flatbuffers::verify_offset(verifier, TypeAliases::VT_VF64) &&
           verifier.verify(self.vf64()) &&
           verifier.end_table();
  }
}

pub struct TypeAliasesArgs<'a> {
    i8_: i8  /* = 0 */,
    u8_: u8  /* = 0 */,
    i16_: i16  /* = 0 */,
    u16_: u16  /* = 0 */,
    i32_: i32  /* = 0 */,
    u32_: u32  /* = 0 */,
    i64_: i64  /* = 0 */,
    u64_: u64  /* = 0 */,
    f32_: f32  /* = 0.0 */,
    f64_: f64  /* = 0.0 */,
    v8: flatbuffers::Offset<&'a [i8]>  /* = 0 */,
    vf64: flatbuffers::Offset<&'a [f64]>  /* = 0 */,
}
pub struct TypeAliasesBuilder<'a> {
  fbb_: &'a mut flatbuffers::FlatBufferBuilder,
  start_: flatbuffers::UOffsetT,
}
impl<'a> TypeAliasesBuilder<'a> {
  pub fn add_i8_(&mut self, i8_: i8 ) {
    self.fbb_.add_element::<i8>(TypeAliases::VT_I8_, i8_, 0);
  }
  pub fn add_u8_(&mut self, u8_: u8 ) {
    self.fbb_.add_element::<u8>(TypeAliases::VT_U8_, u8_, 0);
  }
  pub fn add_i16_(&mut self, i16_: i16 ) {
    self.fbb_.add_element::<i16>(TypeAliases::VT_I16_, i16_, 0);
  }
  pub fn add_u16_(&mut self, u16_: u16 ) {
    self.fbb_.add_element::<u16>(TypeAliases::VT_U16_, u16_, 0);
  }
  pub fn add_i32_(&mut self, i32_: i32 ) {
    self.fbb_.add_element::<i32>(TypeAliases::VT_I32_, i32_, 0);
  }
  pub fn add_u32_(&mut self, u32_: u32 ) {
    self.fbb_.add_element::<u32>(TypeAliases::VT_U32_, u32_, 0);
  }
  pub fn add_i64_(&mut self, i64_: i64 ) {
    self.fbb_.add_element::<i64>(TypeAliases::VT_I64_, i64_, 0);
  }
  pub fn add_u64_(&mut self, u64_: u64 ) {
    self.fbb_.add_element::<u64>(TypeAliases::VT_U64_, u64_, 0);
  }
  pub fn add_f32_(&mut self, f32_: f32 ) {
    self.fbb_.add_element::<f32>(TypeAliases::VT_F32_, f32_, 0.0);
  }
  pub fn add_f64_(&mut self, f64_: f64 ) {
    self.fbb_.add_element::<f64>(TypeAliases::VT_F64_, f64_, 0.0);
  }
  pub fn add_v8(&mut self, v8: flatbuffers::Offset<&[i8]> ) {
    self.fbb_.add_offset(TypeAliases::VT_V8, v8);
  }
  pub fn add_vf64(&mut self, vf64: flatbuffers::Offset<&[f64]> ) {
    self.fbb_.add_offset(TypeAliases::VT_VF64, vf64);
  }
  pub fn new(_fbb: &'a mut flatbuffers::FlatBufferBuilder) -> TypeAliasesBuilder<'a> {
    let start = _fbb.start_table();
    TypeAliasesBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  // TypeAliasesBuilder &operator=(const TypeAliasesBuilder &);
  pub fn finish<'b: 'a>(mut self) -> flatbuffers::Offset<TypeAliases<'b>> {
    let end = self.fbb_.end_table(self.start_);
    let o = flatbuffers::Offset::<TypeAliases>::new(end);
    o
  }
}

#[inline]
pub fn CreateTypeAliases<'fbb, 'a: 'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    args: &TypeAliasesArgs<'a>) -> flatbuffers::Offset<TypeAliases<'fbb>> {
  let mut builder = TypeAliasesBuilder::new(_fbb);
  builder.add_f64_(args.f64_());
  builder.add_u64_(args.u64_());
  builder.add_i64_(args.i64_());
  builder.add_vf64(args.vf64());
  builder.add_v8(args.v8());
  builder.add_f32_(args.f32_());
  builder.add_u32_(args.u32_());
  builder.add_i32_(args.i32_());
  builder.add_u16_(args.u16_());
  builder.add_i16_(args.i16_());
  builder.add_u8_(args.u8_());
  builder.add_i8_(args.i8_());
  builder.finish()
}

#[inline]
pub fn CreateTypeAliasesDirect<'fbb>(
    _fbb: &'fbb mut flatbuffers::FlatBufferBuilder,
    i8_: i8  /* = 0 */,
    u8_: u8  /* = 0 */,
    i16_: i16  /* = 0 */,
    u16_: u16  /* = 0 */,
    i32_: i32  /* = 0 */,
    u32_: u32  /* = 0 */,
    i64_: i64  /* = 0 */,
    u64_: u64  /* = 0 */,
    f32_: f32  /* = 0.0 */,
    f64_: f64  /* = 0.0 */,
    v8: Option<&[i8]> /* = nullptr */,
    vf64: Option<&[f64]> /* = nullptr */) -> flatbuffers::Offset<TypeAliases<'fbb>> {
  let _offset_v8 = if let Some(x) = v8 { _fbb.create_vector::<i8>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  let _offset_vf64 = if let Some(x) = vf64 { _fbb.create_vector::<f64>(x /* slice */) } else { flatbuffers::Offset::new(0) };
  return CreateTypeAliases(
      _fbb,
      i8_,
      u8_,
      i16_,
      u16_,
      i32_,
      u32_,
      i64_,
      u64_,
      f32_,
      f64_,
      _offset_v8,
      _offset_vf64);
}

#[inline]
pub fn VerifyAny(verifier: &mut flatbuffers::Verifier, obj: &[u8], type_: Any) -> bool {
  match type_ {
    Any::NONE => {
      return true;
    }
    Any::Monster => {

      if obj.len() != mem::size_of::<Monster>() {
          return false;
      }
      let x: &Monster = unsafe {
        &*(obj.as_ptr() as *const Monster)
      };
      return verifier.verify_table::<&Monster>(x);
    }
    Any::TestSimpleTableWithEnum => {

      if obj.len() != mem::size_of::<TestSimpleTableWithEnum>() {
          return false;
      }
      let x: &TestSimpleTableWithEnum = unsafe {
        &*(obj.as_ptr() as *const TestSimpleTableWithEnum)
      };
      return verifier.verify_table::<&TestSimpleTableWithEnum>(x);
    }
    Any::MyGame_Example2_Monster => {

      if obj.len() != mem::size_of::<super::Example2::Monster>() {
          return false;
      }
      let x: &super::Example2::Monster = unsafe {
        &*(obj.as_ptr() as *const super::Example2::Monster)
      };
      return verifier.verify_table::<&super::Example2::Monster>(x);
    }
  }
}

#[inline]
pub fn VerifyAnyVector(_verifier: &mut flatbuffers::Verifier, values: &[flatbuffers::Offset<flatbuffers::Void>], types: &[u8]) -> bool {
  //if values.len() == 0 || types.len() == 0 {
  //  return values.len() == types.len();
  //}
  if values.len() != types.len() { return false; }
  for _i in (0 as flatbuffers::UOffsetT)..values.len() {
    //if !VerifyAny(
    //    verifier,  values.Get(i), types.GetEnum::<Any>(i)) {
    //  return false;
    //}
  }
  return true;
}

#[inline]
pub fn GetMonster(buf: &[u8]) -> &Monster  {
  return flatbuffers::get_root::<&Monster>(buf);
}

#[inline]
pub fn MonsterIdentifier() -> &'static str {
  return "MONS";
}

#[inline]
pub fn MonsterBufferHasIdentifier(buf: &[u8]) -> bool {
  return flatbuffers::buffer_has_identifier(
      buf, MonsterIdentifier());
}

#[inline]
pub fn VerifyMonsterBuffer(
    verifier: &mut flatbuffers::Verifier) -> bool {
  return verifier.verify_buffer::<Monster>(MonsterIdentifier());
}

#[inline]
pub fn MonsterExtension() -> &'static str {
  return "mon";
}

#[inline]
pub fn FinishMonsterBuffer(
    fbb: &mut flatbuffers::FlatBufferBuilder,
    root: flatbuffers::Offset<Monster>) {
  fbb.finish_with_identifier(root, MonsterIdentifier());
}

}  // pub mod Example
}  // pub mod MyGame

